import rasterio
import geopandas as gpd
from shapely.geometry import box
from pyproj import Transformer
from rasterstats import zonal_stats
import numpy as np

# -----------------------------
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
# -----------------------------
raster_path = "IMAGERY.TIF"   # ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (THEOS1)
lat = 18.11302
lon = 99.31819
width_m = 10    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏°‡∏ï‡∏£)
height_m = 12   # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏°‡∏ï‡∏£)

# ‡∏´‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏û ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏•‡∏≠‡∏á "‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÅ‡∏õ‡∏•‡∏á" ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏Å‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ (‡∏´‡∏ô‡πà‡∏ß‡∏¢ = ‡πÄ‡∏°‡∏ï‡∏£)
buffer_scales = [0, 0.5, 1.0, 1.5, 2.0, 3.0]  # 0 = ‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô

def extract_means_from_props(props: dict):
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ zonal_stats ‡πÉ‡∏´‡πâ 'mean' (‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠ 'mean_1','mean_2',... ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏±‡∏ì‡∏ë‡∏¥‡∏ï"""
    means = {}
    # ‡∏£‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô mean
    mean_items = [(k, v) for k, v in props.items() if k.startswith("mean")]
    if not mean_items:
        return means
    for k, v in mean_items:
        if k == "mean":
            idx = 1
        else:
            try:
                idx = int(k.split("_")[1])
            except Exception:
                idx = 1
        means[f"Band_{idx}"] = None if v is None else float(v)
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ô‡∏î‡πå
    means = dict(sorted(means.items(), key=lambda kv: int(kv[0].split("_")[1])))
    return means

with rasterio.open(raster_path) as src:
    raster_crs = src.crs
    res_x, res_y = src.res  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• (‡πÄ‡∏°‡∏ï‡∏£/‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•)
    px_size = max(abs(res_x), abs(res_y))

    # 1) ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î WGS84 ‚Üí CRS ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    if str(raster_crs).upper() != "EPSG:4326":
        transformer = Transformer.from_crs("EPSG:4326", raster_crs, always_xy=True)
        x_center, y_center = transformer.transform(lon, lat)
    else:
        x_center, y_center = lon, lat

    # 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏°‡∏ï‡∏£) ‡πÉ‡∏ô CRS ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    half_w, half_h = width_m / 2.0, height_m / 2.0
    base_poly = box(x_center - half_w, y_center - half_h,
                    x_center + half_w, y_center + half_h)

    # 3) ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ buffer ‡πÄ‡∏û‡∏¥‡πà‡∏°
    means_result = None
    used_geom_desc = None

    for scale in buffer_scales:
        if scale == 0:
            geom = base_poly
            used_geom_desc = f"{width_m}m √ó {height_m}m (no buffer)"
        else:
            # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏≠‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞ = scale * ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            buf_m = scale * px_size
            geom = base_poly.buffer(buf_m)
            used_geom_desc = f"{width_m}m √ó {height_m}m + buffer {buf_m:.1f} m"

        gdf = gpd.GeoDataFrame({"id":[1]}, geometry=[geom], crs=raster_crs)

        # ‡πÉ‡∏ä‡πâ all_touched=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡∏Ç‡∏≠‡∏ö polygon ‡∏Å‡πá‡∏ô‡∏±‡∏ö‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢
        stats = zonal_stats(
            gdf,
            raster_path,
            stats=["mean"],
            all_touched=True,
            nodata=None,      # ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ nodata ‡πÉ‡∏ô metadata ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏á
            geojson_out=True
        )

        if not stats:
            continue

        props = stats[0].get("properties", {})
        means = extract_means_from_props(props)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ mean ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ö‡∏ô‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô None)
        if means and any(v is not None for v in means.values()):
            means_result = means
            break

# 4) ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
if means_result is None:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÑ‡∏î‡πâ (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô/‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏†‡∏≤‡∏û/‡πÄ‡∏õ‡πá‡∏ô nodata ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)")
else:
    print(f"üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î WGS84 ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: lat={lat}, lon={lon}")
    print(f"üó∫Ô∏è  ‡∏†‡∏≤‡∏û CRS: {raster_crs}, pixel ~ {abs(res_x)}√ó{abs(res_y)} m")
    print(f"üì¶ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {used_geom_desc}")
    print("üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ô‡∏î‡πå (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≠‡∏ö‡πÜ ‡πÅ‡∏õ‡∏•‡∏á):")
    for k, v in means_result.items():
        print(f"  - {k}: {v:.4f}" if v is not None else f"  - {k}: None")
