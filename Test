<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sentinel-2 Viewer</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css"/>
  <style>
    body { margin:0; padding:0; font-family:sans-serif; background:#0f172a; color:#e2e8f0; overflow:hidden;}
    #map { width: calc(100% - 420px); height:100vh; float:left;}
    #sidebar { width:420px; height:100vh; float:right; background:#1e293b; overflow-y:auto; padding:20px;}
    input, select, button { width:100%; padding:10px; margin-bottom:10px; border-radius:8px; border:none; font-size:14px;}
    button { background:#2563eb; color:white; cursor:pointer;}
    .section { margin-bottom:20px;}
    .data-card { background:#0f172a; padding:10px; border-radius:8px; margin-bottom:8px;}
    .data-label { font-size:12px; color:#94a3b8;}
    .data-value { font-size:16px; color:#60a5fa; font-weight:600;}
  </style>
</head>
<body>

<div id="map"></div>

<div id="sidebar">
  <h2>Sentinel-2 Viewer</h2>

  <div class="section">
    <label>Start Date</label>
    <input type="date" id="start" value="2020-01-01">
    <label>End Date</label>
    <input type="date" id="end" value="2020-01-15">
    <button id="loadMap">Load Satellite Imagery</button>
  </div>

  <div class="section">
    <label>Mode</label>
    <select id="mode">
      <option value="point" selected>Point Mode</option>
      <option value="area">Area Mode</option>
    </select>
    <button id="drawArea" disabled>Draw Area</button>
    <label>Latitude</label>
    <input type="number" id="lat" step="0.0001" placeholder="19.2000">
    <label>Longitude</label>
    <input type="number" id="lon" step="0.0001" placeholder="100.1000">
    <button id="getPixel">Analyze Point</button>
  </div>

  <div class="section">
    <h3>Reflectance Data</h3>
    <div class="data-card"><div class="data-label">Red (B4)</div><div class="data-value" id="red">-</div></div>
    <div class="data-card"><div class="data-label">Green (B3)</div><div class="data-value" id="green">-</div></div>
    <div class="data-card"><div class="data-label">Blue (B2)</div><div class="data-value" id="blue">-</div></div>
    <div class="data-card"><div class="data-label">NIR (B8)</div><div class="data-value" id="nir">-</div></div>
  </div>

  <div class="section">
    <h3>Vegetation Indices</h3>
    <div class="data-card"><div class="data-label">NDVI</div><div class="data-value" id="ndvi">-</div></div>
    <div class="data-card"><div class="data-label">TNDVI</div><div class="data-value" id="tndvi">-</div></div>
    <div class="data-card"><div class="data-label">SR</div><div class="data-value" id="sr">-</div></div>
    <div class="data-card"><div class="data-label">SAVI</div><div class="data-value" id="savi">-</div></div>
    <div class="data-card"><div class="data-label">MSAVI2</div><div class="data-value" id="msavi2">-</div></div>
  </div>
</div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js"></script>
<script>
  // Map setup
  var map = L.map('map').setView([19.2, 100.1], 10);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {attribution:'&copy; OSM'}).addTo(map);

  // FeatureGroup for drawing
  var drawnItems = new L.FeatureGroup().addTo(map);
  var drawnPolygon = null;
  var marker = null;

  // Leaflet Draw control
  var drawControl = new L.Control.Draw({
    edit: { featureGroup: drawnItems },
    draw: { polygon:true, rectangle:true, polyline:false, circle:false, marker:false, circlemarker:false }
  });
  map.addControl(drawControl);

  // Mode toggle
  document.getElementById('mode').addEventListener('change', function(){
    var mode = this.value;
    if(mode==='area'){
      document.getElementById('lat').disabled = true;
      document.getElementById('lon').disabled = true;
      document.getElementById('drawArea').disabled = false;
    } else {
      document.getElementById('lat').disabled = false;
      document.getElementById('lon').disabled = false;
      document.getElementById('drawArea').disabled = true;
    }
  });

  // Draw Area button
  document.getElementById('drawArea').onclick = function(){
    alert("Draw polygon or rectangle on map");
    new L.Draw.Polygon(map, drawControl.options.draw.polygon).enable();
  };

  // Capture drawn area
  map.on(L.Draw.Event.CREATED, function(e){
    drawnItems.clearLayers();
    drawnPolygon = e.layer;
    drawnItems.addLayer(drawnPolygon);
    analyzeArea();
  });

  // Show marker
  function showMarker(lat, lon){
    if(marker) map.removeLayer(marker);
    marker = L.marker([lat, lon]).addTo(map);
  }

  // Analyze point
  document.getElementById('getPixel').onclick = async function(){
    if(document.getElementById('mode').value!=='point'){ alert("Switch to Point Mode"); return; }
    var lat = parseFloat(document.getElementById('lat').value);
    var lon = parseFloat(document.getElementById('lon').value);
    if(isNaN(lat)||isNaN(lon)){ alert("Enter valid coordinates"); return; }
    showMarker(lat, lon);
    var start = document.getElementById('start').value;
    var end   = document.getElementById('end').value;
    let resp = await fetch('/get_pixel', {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({lat, lon, start, end})
    });
    let data = await resp.json();
    function f(v){return v!=null?v.toFixed(3):"-";}
    document.getElementById('red').innerText = f(data.B4);
    document.getElementById('green').innerText = f(data.B3);
    document.getElementById('blue').innerText = f(data.B2);
    document.getElementById('nir').innerText = f(data.B8);
    document.getElementById('ndvi').innerText = f(data.indices?.NDVI);
    document.getElementById('tndvi').innerText = f(data.indices?.TNDVI);
    document.getElementById('sr').innerText = f(data.indices?.SR);
    document.getElementById('savi').innerText = f(data.indices?.SAVI);
    document.getElementById('msavi2').innerText = f(data.indices?.MSAVI2);
  }

  // Analyze area
  async function analyzeArea(){
    if(!drawnPolygon){ alert("Draw an area first!"); return; }
    var latlngs = drawnPolygon.getLatLngs()[0].map(p=>[p.lng, p.lat]);
    var start = document.getElementById('start').value;
    var end   = document.getElementById('end').value;
    let resp = await fetch('/get_area', {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({coords: latlngs, start, end})
    });
    let data = await resp.json();
    function f(v){return v!=null?v.toFixed(3):"-";}
    document.getElementById('red').innerText = f(data.B4);
    document.getElementById('green').innerText = f(data.B3);
    document.getElementById('blue').innerText = f(data.B2);
    document.getElementById('nir').innerText = f(data.B8);
    document.getElementById('ndvi').innerText = f(data.indices?.NDVI);
    document.getElementById('tndvi').innerText = f(data.indices?.TNDVI);
    document.getElementById('sr').innerText = f(data.indices?.SR);
    document.getElementById('savi').innerText = f(data.indices?.SAVI);
    document.getElementById('msavi2').innerText = f(data.indices?.MSAVI2);
  }

</script>
</body>
</html>
