@app.route('/get_area', methods=['POST'])
def get_area():
    try:
        start = request.json['start']
        end = request.json['end']
        area = request.json['area']

        sw_lat = float(area['sw_lat'])
        sw_lon = float(area['sw_lon'])
        ne_lat = float(area['ne_lat'])
        ne_lon = float(area['ne_lon'])

        # ‚úÖ Geometry
        geom = ee.Geometry.Rectangle([sw_lon, sw_lat, ne_lon, ne_lat])
        region_area = geom.area().getInfo()
        print(f"üß≠ Geometry Input: SW=({sw_lat},{sw_lon}), NE=({ne_lat},{ne_lon}), Area={region_area:.2f} m¬≤")

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û Sentinel-2 ‡∏ó‡∏µ‡πà‡∏°‡∏µ Reflectance (SR)
        collection = (
            ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
            .filterDate(start, end)
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
            .map(mask_s2_clouds_reflectance)
        )

        image = collection.mean()

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        samples = image.sample(
            region=geom,
            scale=10,         # Sentinel-2 resolution
            numPixels=10000,  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô timeout
            geometries=False
        )

        bands_list = ["B2", "B3", "B4", "B8"]
        pixel_data = {}

        for b in bands_list:
            vals = samples.aggregate_array(b).getInfo()
            vals = [v for v in vals if v is not None]
            if len(vals) > 0:
                pixel_data[b] = float(np.mean(vals))
            else:
                pixel_data[b] = None

        print("üéØ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:", pixel_data)

        if not pixel_data or len([v for v in pixel_data.values() if v is not None]) == 0:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"}), 400

        # ‚úÖ Step 1: ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ô‡∏î‡πå
        blue = float(pixel_data.get("B2", 0))
        green = float(pixel_data.get("B3", 0))
        red = float(pixel_data.get("B4", 0))
        nir = float(pixel_data.get("B8", 0))

        # ‚úÖ Step 2: ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå Field Reflectance (MLP)
        X = np.array([[blue, green, red, nir]])
        X_scaled = scaler_X.transform(X)
        y_pred_scaled = mlp_model.predict(X_scaled)
        field_reflectance = scaler_y.inverse_transform(y_pred_scaled)

        # ‚úÖ Step 3: ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Ref Model
        ref_X_scaled = ref_scaler_X.transform(field_reflectance)
        ref_y_pred_scaled = ref_model.predict(ref_X_scaled)
        ref_field_reflectance = ref_scaler_y.inverse_transform(ref_y_pred_scaled)
        ref_blue, ref_green, ref_red, ref_nir = ref_field_reflectance.ravel()

        # ‚úÖ Step 4: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏û‡∏∑‡∏ä‡∏û‡∏£‡∏£‡∏ì
        indices = calculate_indices(ref_blue, ref_green, ref_red, ref_nir)

        # ‚úÖ Step 5: ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå AGB (SVR)
        idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
        idx_scaled = svr_scaler_X.transform(idx_vals)
        agb_scaled = svr_model.predict(idx_scaled)
        agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

        # ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result = {
            "reflectance": {"Blue": ref_blue, "Green": ref_green, "Red": ref_red, "NIR": ref_nir},
            "indices": indices,
            "AGB": agb
        }

        print(f"‚úÖ Area Calculation Success: {result}")
        return jsonify(result)

    except Exception as e:
        print(f"‚ùå ERROR in get_area(): {str(e)}")
        return jsonify({"error": str(e)}), 500
