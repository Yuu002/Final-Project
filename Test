# mlp_model.py (แก้ให้แล้ว)
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import joblib
import sklearn

# -----------------------------
# โหลด dataset
# -----------------------------
data = pd.read_excel("bands_extracted.xlsx")  
# ต้องมี columns: Band1,Band2,Band3,Band4, Blue (B1), Green (B2), Red (B3), NIR (B4)

X = data[['Band1', 'Band2', 'Band3', 'Band4']].values
y = data[['Blue (B1)', 'Green (B2)', 'Red (B3)', 'NIR (B4)']].values

# -----------------------------
# Train-Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -----------------------------
# Scaling
# -----------------------------
scaler_X = StandardScaler()
scaler_y = StandardScaler()
X_train_scaled = scaler_X.fit_transform(X_train)
y_train_scaled = scaler_y.fit_transform(y_train)

# -----------------------------
# สร้าง MLP
# -----------------------------
mlp = MLPRegressor(hidden_layer_sizes=(64, 64, 32),
                   activation='relu',
                   solver='adam',
                   max_iter=500,
                   random_state=42)
mlp.fit(X_train_scaled, y_train_scaled)

# -----------------------------
# Evaluate
# -----------------------------
X_test_scaled = scaler_X.transform(X_test)
y_pred_scaled = mlp.predict(X_test_scaled)
y_pred = scaler_y.inverse_transform(y_pred_scaled)

r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))   # <-- แก้ตรงนี้ (ใช้ sqrt ของ MSE)
mae = mean_absolute_error(y_test, y_pred)

print("scikit-learn version:", sklearn.__version__)
print("MLP R²:", r2)
print("MLP RMSE:", rmse)
print("MLP MAE:", mae)

# -----------------------------
# Save model + scalers
# -----------------------------
joblib.dump(mlp, "mlp_model.pkl")
joblib.dump(scaler_X, "scaler_X.save")
joblib.dump(scaler_y, "scaler_y.save")

print("✅ Saved MLP model")
