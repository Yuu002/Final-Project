# -----------------------------
# Endpoint: ดึงค่า Pixel Reflectance + predict models (เหมือนเดิม)
# -----------------------------
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    # ... โค้ดเดิม ...
    pass  # ไม่เปลี่ยน

# -----------------------------
# Endpoint: ดึงค่า Area Reflectance + predict models
# -----------------------------
@app.route('/get_area', methods=['POST'])
def get_area():
    # รับค่าพื้นที่เป็น bounding box
    bbox = request.json['bbox']  # [minLon, minLat, maxLon, maxLat]
    start = request.json['start']
    end = request.json['end']

    geom = ee.Geometry.Rectangle(bbox)

    collection = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.mean(),
        geometry=geom,
        scale=10,
        maxPixels=1e9
    )

    pixel_data = bands.getInfo()

    # -----------------------------
    # Step 1: ดึงค่า Blue, Green, Red, NIR
    # -----------------------------
    try:
        blue = float(pixel_data.get("B2", 0))
        green = float(pixel_data.get("B3", 0))
        red = float(pixel_data.get("B4", 0))
        nir = float(pixel_data.get("B8", 0))
    except:
        return jsonify({"error": "invalid pixel values"})

    # -----------------------------
    # Step 2: MLP → Field Reflectance
    # -----------------------------
    X = np.array([[blue, green, red, nir]])
    X_scaled = scaler_X.transform(X)
    y_pred_scaled = mlp_model.predict(X_scaled)
    field_reflectance = scaler_y.inverse_transform(y_pred_scaled)

    # -----------------------------
    # Step 2.5: REF → Cor Field Reflectance
    # -----------------------------
    ref_X_scaled = ref_scaler_X.transform(field_reflectance)
    ref_y_pred_scaled = ref_model.predict(ref_X_scaled)
    ref_field_reflectance = ref_scaler_y.inverse_transform(ref_y_pred_scaled)

    ref_blue, ref_green, ref_red, ref_nir = ref_field_reflectance.ravel()

    # -----------------------------
    # Step 3: คำนวณดัชนี 5 ตัว
    # -----------------------------
    indices = calculate_indices(ref_blue, ref_green, ref_red, ref_nir)

    # -----------------------------
    # Step 4: SVR → Predict AGB
    # -----------------------------
    idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    idx_scaled = svr_scaler_X.transform(idx_vals)
    agb_scaled = svr_model.predict(idx_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

    # -----------------------------
    # รวมผลลัพธ์
    # -----------------------------
    pixel_data.update({
        "field_reflectance": {
            "Blue": ref_blue,
            "Green": ref_green,
            "Red": ref_red,
            "NIR": ref_nir
        },
        "indices": indices,
        "AGB": agb
    })

    return jsonify(pixel_data)
