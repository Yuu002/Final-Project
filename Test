from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import numpy as np
from indices import calculate_indices
from sentinelhub_api import get_bands

# โหลดโมเดล
mlp = joblib.load("backend/mlp_model.pkl")
scaler_X_mlp = joblib.load("backend/scaler_mlp_X.pkl")
scaler_y_mlp = joblib.load("backend/scaler_mlp_y.pkl")
svr_model = joblib.load("backend/svr_agb_model.pkl")
scaler_X_svr = joblib.load("backend/scaler_svr_X.pkl")

app = FastAPI()

class PointRequest(BaseModel):
    lat: float
    lon: float

@app.post("/predict")
def predict_point(req: PointRequest):
    # 1. ดึง band จริงจาก Sentinel Hub
    raw_bands = get_bands(req.lat, req.lon, date="2019-02-15")  # [B02,B03,B04,B08]
    raw_bands_int = [int(x * 100) for x in raw_bands]

    # 2. ส่งเข้า MLP → Ground bands
    X = np.array(raw_bands).reshape(1, -1)
    X_scaled = scaler_X_mlp.transform(X)
    y_pred_scaled = mlp.predict(X_scaled)
    y_pred = scaler_y_mlp.inverse_transform(y_pred_scaled)
    blue, green, red, nir = y_pred[0]

    # 3. คำนวณ indices
    indices = calculate_indices(red=red, nir=nir, blue=blue, green=green)

    # 4. ส่งเข้า AGB model
    X_idx = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"],
                       indices["SAVI"], indices["MSAVI2"]]])
    X_idx_scaled = scaler_X_svr.transform(X_idx)
    agb = svr_model.predict(X_idx_scaled)[0]

    return {
        "bands_satellite": {
            "Blue": raw_bands_int[0],
            "Green": raw_bands_int[1],
            "Red": raw_bands_int[2],
            "NIR": raw_bands_int[3]
        },
        "bands_ground": {
            "Blue": float(blue),
            "Green": float(green),
            "Red": float(red),
            "NIR": float(nir)
        },
        "indices": indices,
        "AGB": float(agb)
    }

---
import requests
import os

# ต้องเซ็ต ENV (CLIENT_ID, CLIENT_SECRET) ใน Render หรือ .env
CLIENT_ID = os.getenv("SENTINEL_CLIENT_ID")
CLIENT_SECRET = os.getenv("SENTINEL_CLIENT_SECRET")

def get_access_token():
    url = "https://services.sentinel-hub.com/oauth/token"
    headers = {"content-type": "application/x-www-form-urlencoded"}
    data = {
        "grant_type": "client_credentials",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
    }
    r = requests.post(url, headers=headers, data=data)
    r.raise_for_status()
    return r.json()["access_token"]

def get_bands(lat, lon, date="2019-02-15", size=20):
    """
    ดึงค่า reflectance B02 (Blue), B03 (Green), B04 (Red), B08 (NIR)
    """
    token = get_access_token()
    url = "https://services.sentinel-hub.com/api/v1/process"
    headers = {"Authorization": f"Bearer {token}"}
    evalscript = """
    //VERSION=3
    function setup() {
      return {
        input: ["B02","B03","B04","B08"],
        output: { bands: 4 }
      }
    }
    function evaluatePixel(sample) {
      return [sample.B02, sample.B03, sample.B04, sample.B08];
    }
    """
    payload = {
        "input": {
            "bounds": {
                "geometry": {
                    "type": "Point",
                    "coordinates": [lon, lat],
                }
            },
            "data": [
                {
                    "type": "sentinel-2-l2a",
                    "dataFilter": {
                        "timeRange": {
                            "from": f"{date}T00:00:00Z",
                            "to": f"{date}T23:59:59Z",
                        },
                    },
                }
            ],
        },
        "aggregation": {
            "timeRange": {
                "from": f"{date}T00:00:00Z",
                "to": f"{date}T23:59:59Z",
            },
            "aggregationInterval": {"of": "P1D"},
            "resx": size,
            "resy": size,
        },
        "evalscript": evalscript,
    }
    r = requests.post(url, headers=headers, json=payload)
    r.raise_for_status()
    arr = r.json()["data"][0]["bands"]
    return arr  # [Blue, Green, Red, NIR]
--
import numpy as np

def calculate_indices(red, nir, blue=None, green=None, L=0.5):
    """
    คำนวณ NDVI, TNDVI, SR, SAVI, MSAVI2
    """
    red = np.array(red, dtype=float)
    nir = np.array(nir, dtype=float)

    ndvi = (nir - red) / (nir + red + 1e-6)
    tndvi = np.sqrt(np.clip(ndvi + 0.5, a_min=0.0, a_max=None))
    sr = nir / (red + 1e-6)
    savi = ((1 + L) * (nir - red)) / (nir + red + L + 1e-6)
    msavi2 = (2 * nir + 1 - np.sqrt((2 * nir + 1) ** 2 - 8 * (nir - red))) / 2

    return {
        "NDVI": float(np.nanmean(ndvi)),
        "TNDVI": float(np.nanmean(tndvi)),
        "SR": float(np.nanmean(sr)),
        "SAVI": float(np.nanmean(savi)),
        "MSAVI2": float(np.nanmean(msavi2)),
    }
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>AGB Prediction App</title>
  <link rel="stylesheet" href="style.css">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>
<body>
  <div id="map"></div>
  <div id="sidebar">
    <h2>ผลลัพธ์</h2>
    <div id="output">คลิกที่แผนที่เพื่อดึงข้อมูล</div>
  </div>
  <script src="app.js"></script>
</body>
</html>
--
var map = L.map('map').setView([18.0, 99.0], 10);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  maxZoom: 18
}).addTo(map);

map.on('click', function(e){
  fetch("http://localhost:8000/predict", {
    method: "POST",
    headers: {"Content-Type":"application/json"},
    body: JSON.stringify({lat: e.latlng.lat, lon: e.latlng.lng})
  })
  .then(res => res.json())
  .then(data => {
    document.getElementById("output").innerHTML =
      `<b>Bands (Satellite *100):</b> ${JSON.stringify(data.bands_satellite)}<br>
       <b>Bands (Ground Predicted):</b> ${JSON.stringify(data.bands_ground)}<br>
       <b>Indices:</b> ${JSON.stringify(data.indices)}<br>
       <b>AGB:</b> ${data.AGB.toFixed(2)} t/ha`;
  });
});
--

body {
  margin: 0;
  padding: 0;
  display: flex;
  height: 100vh;
  font-family: Arial, sans-serif;
}

#map {
  flex: 3;
  height: 100%;
}

#sidebar {
  flex: 1;
  padding: 15px;
  background: #f4f4f9;
  border-left: 2px solid #ddd;
  overflow-y: auto;
}
--
