<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Satellite Analysis</title>

  <!-- Leaflet -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

  <!-- Leaflet Draw -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css" />
  <script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js"></script>

  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    #controls {
      background: #f8f9fa;
      padding: 10px;
      display: flex;
      gap: 10px;
      align-items: center;
      border-bottom: 1px solid #ccc;
    }
    #map {
      flex: 1;
      width: 100%;
    }
    .info-box {
      position: absolute;
      bottom: 10px;
      left: 10px;
      background: white;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
      max-width: 350px;
      font-size: 14px;
    }
    .info-box h4 {
      margin-top: 0;
    }
  </style>
</head>

<body>
  <div id="controls">
    <label>Start:</label>
    <input type="date" id="start" />
    <label>End:</label>
    <input type="date" id="end" />
    <button id="loadMap">üåç Load Map</button>
    <button id="drawArea">üó∫Ô∏è Draw Area</button>
  </div>

  <div id="map"></div>
  <div id="info" class="info-box" style="display:none;"></div>

  <script>
    // -------------------------
    // Initialize Map
    // -------------------------
    const map = L.map('map').setView([14.5, 100.5], 7);
    let currentTileLayer = null;
    let rectangle = null;

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19
    }).addTo(map);

    // -------------------------
    // Draw Control Setup
    // -------------------------
    const drawnItems = new L.FeatureGroup().addTo(map);
    const drawControl = new L.Control.Draw({
      draw: {
        marker: false,
        polyline: false,
        polygon: false,
        circle: false,
        circlemarker: false,
        rectangle: {
          shapeOptions: {
            color: '#2563eb',
            weight: 2,
            fillOpacity: 0.1
          }
        }
      },
      edit: {
        featureGroup: drawnItems,
        edit: true,
        remove: true
      }
    });
    map.addControl(drawControl);

    // -------------------------
    // Load Sentinel Map
    // -------------------------
    document.getElementById('loadMap').onclick = async () => {
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;

      if (!start || !end) {
        alert("Please select start and end dates.");
        return;
      }

      const res = await fetch('/get_map', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ start, end })
      });
      const data = await res.json();

      if (currentTileLayer) map.removeLayer(currentTileLayer);
      currentTileLayer = L.tileLayer(data.sentinel_url, {
        attribution: 'Sentinel-2',
        maxZoom: 14
      }).addTo(map);
    };

    // -------------------------
    // Draw Area Event
    // -------------------------
    document.getElementById('drawArea').onclick = function() {
      new L.Draw.Rectangle(map, drawControl.options.draw.rectangle).enable();
    };

    map.on('draw:created', async function(e) {
      if (rectangle) map.removeLayer(rectangle);
      rectangle = e.layer;
      drawnItems.addLayer(rectangle);

      const bounds = rectangle.getBounds();
      const sw = bounds.getSouthWest();
      const ne = bounds.getNorthEast();
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;

      if (!start || !end) {
        alert("Please select date range first!");
        return;
      }

      const area = {
        sw_lat: sw.lat,
        sw_lon: sw.lng,
        ne_lat: ne.lat,
        ne_lon: ne.lng
      };

      const res = await fetch('/get_area', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ area, start, end })
      });

      const data = await res.json();
      showInfo(data);
    });

    // -------------------------
    // Display Results
    // -------------------------
    function showInfo(data) {
      const box = document.getElementById('info');
      box.style.display = 'block';

      if (data.error) {
        box.innerHTML = `<b style="color:red;">Error:</b> ${data.error}`;
        return;
      }

      box.innerHTML = `
        <h4>üìä Area Analysis</h4>
        <b>Reflectance (Corrected):</b><br/>
        Blue: ${data.reflectance.Blue.toFixed(3)}<br/>
        Green: ${data.reflectance.Green.toFixed(3)}<br/>
        Red: ${data.reflectance.Red.toFixed(3)}<br/>
        NIR: ${data.reflectance.NIR.toFixed(3)}<br/>
        <br/>
        <b>Indices:</b><br/>
        NDVI: ${data.indices.NDVI.toFixed(3)}<br/>
        SAVI: ${data.indices.SAVI.toFixed(3)}<br/>
        MSAVI2: ${data.indices.MSAVI2.toFixed(3)}<br/>
        TNDVI: ${data.indices.TNDVI.toFixed(3)}<br/>
        SR: ${data.indices.SR.toFixed(3)}<br/>
        <br/>
        <b>AGB:</b> ${data.AGB.toFixed(3)}
      `;
    }
  </script>
</body>
</html>
----\
from flask import Flask, render_template, request, jsonify
import ee
import joblib
import numpy as np
from indices import calculate_indices  # ‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô indices.py

# -----------------------------
# Init Earth Engine
# -----------------------------
ee.Initialize(project='map-web-473508')

app = Flask(__name__)

# -----------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Scaler
# -----------------------------
mlp_model = joblib.load("models/mlp_model.pkl")
scaler_X = joblib.load("models/scaler_X.save")
scaler_y = joblib.load("models/scaler_y.save")

ref_model = joblib.load("models/ref_model.pkl")
ref_scaler_X = joblib.load("models/ref_scaler_X.save")
ref_scaler_y = joblib.load("models/ref_scaler_y.save")

svr_model = joblib.load("models/svr_agb_model.pkl")
svr_scaler_X = joblib.load("models/svr_scaler_X.save")
svr_scaler_y = joblib.load("models/svr_scaler_y.save")

# -----------------------------
# Cloud Mask Functions
# -----------------------------
def mask_s2_clouds_reflectance(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = (
        qa.bitwiseAnd(cloud_bit_mask).eq(0)
        .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    )
    return image.updateMask(mask).divide(10000)

def mask_s2_clouds_dn(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0).And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    dn_image = image.divide(10000).multiply(100).toUint16()
    return dn_image.updateMask(mask)

# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')

# -----------------------------
# Endpoint: ‡πÇ‡∏´‡∏•‡∏î Sentinel-2 Map
# -----------------------------
@app.route('/get_map', methods=['POST'])
def get_map():
    start = request.json['start']
    end = request.json['end']

    collection_ref = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )

    image_ref = collection_ref.mean()
    vis_sentinel = {'bands': ['B4', 'B3', 'B2'], 'min': 0.0, 'max': 0.3, 'gamma': 1.0}
    map_id_sentinel = ee.Image(image_ref).getMapId(vis_sentinel)

    return jsonify({
        'sentinel_url': map_id_sentinel['tile_fetcher'].url_format
    })

# -----------------------------
# Endpoint: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î
# -----------------------------
@app.route('/get_area', methods=['POST'])
def get_area():
    try:
        start = request.json['start']
        end = request.json['end']
        area = request.json['area']

        sw_lat = float(area['sw_lat'])
        sw_lon = float(area['sw_lon'])
        ne_lat = float(area['ne_lat'])
        ne_lon = float(area['ne_lon'])

        # ‚úÖ Debug geometry
        print(f"Geometry Input: SW=({sw_lat},{sw_lon}), NE=({ne_lat},{ne_lon})")

        geom = ee.Geometry.Rectangle([sw_lon, sw_lat, ne_lon, ne_lat])

        collection = (
            ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
            .filterDate(start, end)
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
            .map(mask_s2_clouds_reflectance)
        )

        image = collection.mean()

        # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö scale ‡πÅ‡∏•‡∏∞ maxPixels
        bands = image.reduceRegion(
            reducer=ee.Reducer.mean(),
            geometry=geom,
            scale=30,         # ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å 10 ‚Üí 30 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà timeout
            maxPixels=1e9
        )

        pixel_data = bands.getInfo()
        print(f"Raw Pixel Data: {pixel_data}")

        if not pixel_data or len(pixel_data) == 0:
            return jsonify({"error": "no valid pixels (possibly all masked by clouds)"}), 400

        # Step 1: Extract B2-B8
        blue = float(pixel_data.get("B2", 0))
        green = float(pixel_data.get("B3", 0))
        red = float(pixel_data.get("B4", 0))
        nir = float(pixel_data.get("B8", 0))

        # Step 2: Predict field reflectance
        X = np.array([[blue, green, red, nir]])
        X_scaled = scaler_X.transform(X)
        y_pred_scaled = mlp_model.predict(X_scaled)
        field_reflectance = scaler_y.inverse_transform(y_pred_scaled)

        ref_X_scaled = ref_scaler_X.transform(field_reflectance)
        ref_y_pred_scaled = ref_model.predict(ref_X_scaled)
        ref_field_reflectance = ref_scaler_y.inverse_transform(ref_y_pred_scaled)
        ref_blue, ref_green, ref_red, ref_nir = ref_field_reflectance.ravel()

        # Step 3: Indices
        indices = calculate_indices(ref_blue, ref_green, ref_red, ref_nir)

        # Step 4: Predict AGB
        idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
        idx_scaled = svr_scaler_X.transform(idx_vals)
        agb_scaled = svr_model.predict(idx_scaled)
        agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

        result = {
            "reflectance": {"Blue": ref_blue, "Green": ref_green, "Red": ref_red, "NIR": ref_nir},
            "indices": indices,
            "AGB": agb
        }

        print(f"‚úÖ Area Calculation Success: {result}")
        return jsonify(result)

    except Exception as e:
        print(f"‚ùå ERROR in get_area(): {str(e)}")
        return jsonify({"error": str(e)}), 500

# -----------------------------
if __name__ == '__main__':
    app.run(debug=True, threaded=True)
