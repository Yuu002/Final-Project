from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from shapely.geometry import shape, mapping, box
import planetary_computer as pc
from pystac_client import Client
import rasterio
import numpy as np
import tempfile
import requests
import datetime
import json

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Model สำหรับรับ polygon + date
class CropRequest(BaseModel):
    polygon: dict  # GeoJSON Polygon
    date: str      # YYYY-MM-DD

@app.post("/get_bands")
def get_bands(req: CropRequest):
    try:
        stac_api = Client.open("https://planetarycomputer.microsoft.com/api/stac/v1")
        collection = stac_api.get_collection("sentinel-2-l2a")

        # query polygon bounding box
        geom = shape(req.polygon)
        minx, miny, maxx, maxy = geom.bounds

        dt = datetime.datetime.strptime(req.date, "%Y-%m-%d")
        items = collection.get_items(
            bbox=[minx, miny, maxx, maxy],
            datetime=f"{req.date}T00:00:00Z/{req.date}T23:59:59Z"
        )

        item_list = list(items)
        if not item_list:
            return {"error": "No image found for this date"}
        item = item_list[0]

        # ใช้ asset B04 (red) + B03 (green) + B02 (blue) เป็นตัวอย่าง
        bands = ["B02", "B03", "B04"]
        data = {}

        for b in bands:
            asset = item.assets[b]
            url = pc.sign(asset.href)

            # ดาวน์โหลด temporary
            tmp_file = tempfile.NamedTemporaryFile()
            r = requests.get(url)
            tmp_file.write(r.content)
            tmp_file.flush()

            with rasterio.open(tmp_file.name) as src:
                # clip polygon
                out_image, out_transform = rasterio.mask.mask(src, [mapping(geom)], crop=True)
                data[b] = out_image[0].tolist()  # ส่งเป็น list

        return {"bands": data, "id": item.id}

    except Exception as e:
        return {"error": str(e)}
