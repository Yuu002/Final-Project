# app_streamlit_full.py
import streamlit as st
import pandas as pd
import joblib
import tempfile
import rasterio
import numpy as np
from bands_indices import compute_bands_and_indices

st.set_page_config(page_title="AGB Predictor", layout="centered")
st.title("ðŸŒ¿ AGB Prediction from Satellite Image")

# --- Upload raster ---
uploaded_file = st.file_uploader("Upload Satellite Image (TIFF)", type=["tif","tiff"])
raster_path = None
if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".tif") as tmp_file:
        tmp_file.write(uploaded_file.read())
        raster_path = tmp_file.name

    # --- Preview image ---
    try:
        with rasterio.open(raster_path) as src:
            # à¸­à¹ˆà¸²à¸™ 3 band à¸ªà¸³à¸«à¸£à¸±à¸š preview (R,G,B)
            bands_to_show = min(3, src.count)
            img_array = src.read(list(range(1,bands_to_show+1)))
            img_array = np.transpose(img_array, (1,2,0))
            if img_array.dtype != np.uint8:
                img_array = ((img_array - img_array.min()) / img_array.ptp() * 255).astype(np.uint8)
            st.subheader("ðŸ–¼ Uploaded Image Preview")
            st.image(img_array, use_column_width=True)
    except Exception as e:
        st.error(f"Cannot display image: {e}")

# --- User inputs ---
lat = st.number_input("Latitude (N)", value=0.0, format="%.6f", step=0.000001)
lon = st.number_input("Longitude (E)", value=0.0, format="%.6f", step=0.000001)
width_m = st.number_input("Plot width (m)", value=10.0)
height_m = st.number_input("Plot height (m)", value=12.0)

# --- Load model ---
try:
    model = joblib.load("svr_agb_model.pkl")
except:
    st.error("Cannot load model svr_agb_model.pkl")
    model = None

# --- Predict button ---
if st.button("Predict AGB"):
    if raster_path is None:
        st.error("Please upload a raster image first")
    elif model is None:
        st.error("Model not loaded")
    else:
        try:
            # --- Compute bands and indices ---
            bands_dict, indices_dict = compute_bands_and_indices(raster_path, lat, lon, width_m, height_m)

            # Bands table (vertical)
            st.subheader("ðŸ“Š Bands (automatic)")
            bands_df = pd.DataFrame(list(bands_dict.items()), columns=["Band", "Mean Value"])
            st.table(bands_df)

            # Indices table (vertical)
            st.subheader("ðŸ“ˆ Vegetation Indices")
            indices_df = pd.DataFrame(list(indices_dict.items()), columns=["Index", "Value"])
            st.table(indices_df)

            # Predict AGB
            feature_order = ["NDVI","TNDVI","SR","SAVI","MSAVI2"]
            X = [indices_dict[f] for f in feature_order]
            agb_pred = model.predict([X])[0]

            st.subheader("ðŸŒ± Predicted AGB (ton/ha)")
            st.markdown(f"<h2 style='color:green;font-size:30px;'>{agb_pred:.3f}</h2>", unsafe_allow_html=True)

        except Exception as e:
            st.error(f"Error computing bands/indices: {e}")
