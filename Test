# ml_model
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
import joblib

# Load dataset
data = pd.read_csv("bands_extracted.csv")
X = data[["Band1", "Band2", "Band3", "Band4"]].values
y = data[["Blue (B1)", "Green (B2)", "Red (B3)", "NIR (B4)"]].values

# Scale features and outputs
scaler_X = StandardScaler()
X_scaled = scaler_X.fit_transform(X)

scaler_y = StandardScaler()
y_scaled = scaler_y.fit_transform(y)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)

# Train MLP
mlp = MLPRegressor(hidden_layer_sizes=(64,64,32), max_iter=500, random_state=42)
mlp.fit(X_train, y_train)

# Save model and scalers
joblib.dump(mlp, "mlp_model.pkl")
joblib.dump(scaler_X, "scaler_X.save")
joblib.dump(scaler_y, "scaler_y.save")
--

#indices.py
import numpy as np

def calculate_indices(red, nir, blue=None, green=None, L=0.5):
    """
    คำนวณ NDVI, TNDVI, SR, SAVI, MSAVI2
    """
    red = np.array(red, dtype=float)
    nir = np.array(nir, dtype=float)

    ndvi = (nir - red) / (nir + red + 1e-6)
    tndvi = np.sqrt(np.clip(ndvi + 0.5, a_min=0.0, a_max=None))
    sr = nir / (red + 1e-6)
    savi = ((1 + L) * (nir - red)) / (nir + red + L + 1e-6)
    msavi2 = (2 * nir + 1 - np.sqrt((2 * nir + 1) ** 2 - 8 * (nir - red))) / 2

    return {
        "NDVI": float(np.nanmean(ndvi)),
        "TNDVI": float(np.nanmean(tndvi)),
        "SR": float(np.nanmean(sr)),
        "SAVI": float(np.nanmean(savi)),
        "MSAVI2": float(np.nanmean(msavi2)),
    }
--

