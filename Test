# bands_indices.py
import rasterio
import numpy as np
from pyproj import Transformer
from shapely.geometry import box
from rasterstats import zonal_stats

def compute_bands_and_indices(raster_path, lat, lon, width_m=10, height_m=12):
    """
    Compute mean spectral bands (all bands in raster) and vegetation indices (NDVI, TNDVI, SR, SAVI, MSAVI2)
    for a rectangular plot centered at (lat, lon) with given width and height in meters.
    Returns:
        bands_dict: {"B1": val, "B2": val, ...}
        indices_dict: {"NDVI": val, "TNDVI": val, "SR": val, "SAVI": val, "MSAVI2": val}
    """
    # --- 1. Load raster and CRS ---
    with rasterio.open(raster_path) as src:
        raster_crs = src.crs
        band_count = src.count
        res_x, res_y = src.res
        # transform lat/lon -> raster CRS
        transformer = Transformer.from_crs("EPSG:4326", raster_crs, always_xy=True)
        x_center, y_center = transformer.transform(lon, lat)

        # --- 2. Create rectangular polygon (plot) ---
        half_w, half_h = width_m / 2, height_m / 2
        xmin, xmax = x_center - half_w, x_center + half_w
        ymin, ymax = y_center - half_h, y_center + half_h
        plot_poly = box(xmin, ymin, xmax, ymax)

        # --- 3. Extract mean value for each band ---
        gdf = {'type': 'FeatureCollection',
               'features':[{'type':'Feature', 'geometry':plot_poly.__geo_interface__, 'properties':{}}]}
        stats = zonal_stats(gdf, raster_path, stats=['mean'], all_touched=True)
        if not stats or 'mean' not in stats[0]:
            raise ValueError("Cannot compute zonal stats for the selected area.")

        bands_dict = {}
        for i in range(1, band_count+1):
            key = f"B{i}"
            mean_val = stats[0].get(f"mean_{i}", None)
            bands_dict[key] = mean_val

    # --- 4. Identify NIR and Red bands ---
    # สมมติ: NIR = last band, Red = 3rd band ถ้ามี
    if band_count >= 4:
        red_band_key = f"B3"
        nir_band_key = f"B{band_count}"
    else:
        # ถ้า band น้อยกว่า 4: แทนค่า default
        red_band_key = f"B{band_count-1}" if band_count>1 else f"B1"
        nir_band_key = f"B{band_count}"

    R = bands_dict[red_band_key]
    NIR = bands_dict[nir_band_key]
    L = 0.5

    # --- 5. Compute vegetation indices ---
    NDVI = (NIR - R) / (NIR + R + 1e-6)
    TNDVI = np.sqrt((NDVI) + L)
    SR = NIR / (R + 1e-6)
    SAVI = ((1+L)*(NIR - R)) / (NIR + R + L + 1e-6)
    MSAVI2 = (2*NIR + 1 - np.sqrt((2*NIR + 1)**2 - 8*(NIR - R))) / 2

    indices_dict = {
        "NDVI": NDVI,
        "TNDVI": TNDVI,
        "SR": SR,
        "SAVI": SAVI,
        "MSAVI2": MSAVI2
    }

    return bands_dict, indices_dict
