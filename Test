import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt
import joblib

# --------------------------------------------------
# 1. โหลดข้อมูล
# --------------------------------------------------
data = pd.read_excel("bands_sentinel_train.xlsx")

X = data[["Band1", "Band2", "Band3", "Band4"]].values
y = data[["Blue (B1)", "Green (B2)", "Red (B3)", "NIR (B4)"]].values

# --------------------------------------------------
# 2. Scaling
# --------------------------------------------------
scaler_X = StandardScaler()
scaler_y = StandardScaler()

X_scaled = scaler_X.fit_transform(X)
y_scaled = scaler_y.fit_transform(y)

# --------------------------------------------------
# 3. แบ่ง Train / Validation
# --------------------------------------------------
X_train, X_val, y_train, y_val = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)

# --------------------------------------------------
# 4. สร้างโมเดล (ไม่ใช้ TensorFlow)
# --------------------------------------------------
model = MLPRegressor(
    hidden_layer_sizes=(128, 64, 32),
    activation='relu',
    solver='adam',
    max_iter=1000,
    batch_size=8,
    random_state=42,
    early_stopping=True,
    n_iter_no_change=30,
    verbose=True
)

# --------------------------------------------------
# 5. เทรนโมเดล
# --------------------------------------------------
model.fit(X_train, y_train)

# --------------------------------------------------
# 6. Evaluate
# --------------------------------------------------
y_pred = model.predict(X_val)
mse = mean_squared_error(y_val, y_pred)
mae = mean_absolute_error(y_val, y_pred)
print(f"Validation MSE: {mse:.4f}")
print(f"Validation MAE: {mae:.4f}")

# --------------------------------------------------
# 7. Save model และ scaler
# --------------------------------------------------
joblib.dump(model, "deep_reflectance_model.pkl")
joblib.dump(scaler_X, "scaler_X.save")
joblib.dump(scaler_y, "scaler_y.save")

print("✅ Saved model as deep_reflectance_model.pkl, scaler_X.save, and scaler_y.save")

# --------------------------------------------------
# 8. กราฟผลการเทรน (loss curve)
# --------------------------------------------------
plt.plot(model.loss_curve_, label='Training Loss')
plt.title("MLPRegressor Training Loss")
plt.xlabel("Iterations")
plt.ylabel("Loss (MSE)")
plt.legend()
plt.grid(True)
plt.show()
