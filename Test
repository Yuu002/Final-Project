import rasterio
import numpy as np
from pyproj import Transformer

# --- 1. ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û ---
raster_path = "IMAGERY.TIF"

# --- 2. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ---
lat = float(input("‡∏Å‡∏£‡∏≠‡∏Å Latitude (N): "))
lon = float(input("‡∏Å‡∏£‡∏≠‡∏Å Longitude (E): "))
width_m = float(input("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£): "))
height_m = float(input("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£): "))

# --- 3. ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û ---
with rasterio.open(raster_path) as src:
    print(f"\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Bands ‡πÉ‡∏ô‡∏†‡∏≤‡∏û: {src.count}")
    print(f"Resolution: {src.res} ‡πÄ‡∏°‡∏ï‡∏£/‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•")
    print(f"CRS: {src.crs}\n")

    # --- 4. ‡πÅ‡∏õ‡∏•‡∏á lat/lon -> CRS ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (‡πÄ‡∏ä‡πà‡∏ô UTM) ---
    if src.crs.to_string() != "EPSG:4326":
        transformer = Transformer.from_crs("EPSG:4326", src.crs, always_xy=True)
        x, y = transformer.transform(lon, lat)
    else:
        x, y = lon, lat

    # --- 5. ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á pixel ---
    row, col = src.index(x, y)

    # --- 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï window ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ---
    res_x, res_y = src.res
    half_w = int((width_m / res_x) / 2)
    half_h = int((height_m / abs(res_y)) / 2)

    r0 = max(0, row - half_h)
    r1 = min(src.height, row + half_h + 1)
    c0 = max(0, col - half_w)
    c1 = min(src.width, col + half_w + 1)

    # --- 7. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞ band ---
    bands_mean = {}
    for b in range(1, src.count + 1):
        band = src.read(b)[r0:r1, c0:c1].astype(float)

        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ nodata ‡∏≠‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ nan)
        if src.nodata is not None:
            band[band == src.nodata] = np.nan
        band[band == 0] = np.nan  # ‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ 0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        if np.all(np.isnan(band)):
            band_mean = None
        else:
            band_mean = float(np.nanmean(band))
        bands_mean[f"Band_{b}"] = band_mean

# --- 8. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
print("üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Reflectance ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Band:")
for band, mean_val in bands_mean.items():
    print(f"{band}: {mean_val}")
