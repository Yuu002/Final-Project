# config.py

# Sentinel Hub Configuration
INSTANCE_ID = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx"
CLIENT_ID = "your_client_id"
CLIENT_SECRET = "your_client_secret"
--

# utils.py
import matplotlib.pyplot as plt
import numpy as np
import rasterio

def plot_bands(image_array, title="Sentinel Image"):
    """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û RGB ‡∏à‡∏≤‡∏Å array"""
    rgb = np.stack([
        image_array[:, :, 2],  # R
        image_array[:, :, 1],  # G
        image_array[:, :, 0]   # B
    ], axis=-1)
    rgb = np.clip(rgb / np.percentile(rgb, 98), 0, 1)  # Normalize
    plt.imshow(rgb)
    plt.title(title)
    plt.axis("off")
    plt.show()

def save_geotiff(filename, data, transform, crs):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å GeoTIFF"""
    with rasterio.open(
        filename, "w",
        driver="GTiff",
        height=data.shape[0],
        width=data.shape[1],
        count=data.shape[2],
        dtype=data.dtype,
        crs=crs,
        transform=transform
    ) as dst:
        for i in range(data.shape[2]):
            dst.write(data[:, :, i], i + 1)
--

# fetch_data.py
from sentinelhub import (
    SHConfig, BBox, CRS, MimeType,
    SentinelHubRequest, DataCollection, bbox_to_dimensions
)
import numpy as np
from datetime import date
from config import INSTANCE_ID, CLIENT_ID, CLIENT_SECRET
from utils import plot_bands, save_geotiff

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API
config = SHConfig()
config.instance_id = INSTANCE_ID
config.sh_client_id = CLIENT_ID
config.sh_client_secret = CLIENT_SECRET

# üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏•‡∏≥‡∏õ‡∏≤‡∏á)
bbox = BBox(bbox=[100.3, 18.1, 100.5, 18.3], crs=CRS.WGS84)
resolution = 10  # ‡πÄ‡∏°‡∏ï‡∏£
size = bbox_to_dimensions(bbox, resolution=resolution)

# üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
time_interval = ("2020-06-01", "2020-06-30")

# üîπ Evalscript: ‡πÄ‡∏≠‡∏≤ B02 (Blue), B03 (Green), B04 (Red), B08 (NIR)
evalscript = """
//VERSION=3
function setup() {
  return {
    input: ["B02", "B03", "B04", "B08"],
    output: { bands: 4 }
  };
}
function evaluatePixel(sample) {
  return [sample.B02, sample.B03, sample.B04, sample.B08];
}
"""

# üîπ Request ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
request = SentinelHubRequest(
    data_folder="output",
    evalscript=evalscript,
    input_data=[
        SentinelHubRequest.input_data(
            data_collection=DataCollection.SENTINEL2_L1C,
            time_interval=time_interval,
        )
    ],
    responses=[
        SentinelHubRequest.output_response("default", MimeType.TIFF)
    ],
    bbox=bbox,
    size=size,
    config=config
)

# üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
image = request.get_data()[0]  # numpy array
print("Shape:", image.shape)

# üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
plot_bands(image, title="Sentinel-2 RGB (with NIR included)")

# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å GeoTIFF
save_geotiff("output/sentinel_image.tif", image, request.get_transform(), request.get_crs())
print("‚úÖ Saved: output/sentinel_image.tif")
