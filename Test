<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AGB Satellite Map</title>

  <link rel="stylesheet" href="css/leaflet.css" />
  <link rel="stylesheet" href="css/leaflet.draw.css" />
  <link rel="stylesheet" href="css/style.css" />
</head>
<body>
  <div id="map"></div>
  <div class="sidebar" id="sidebar">
    <h2>Selected Area / Point</h2>
    <div id="info">No selection</div>
    <button id="fetch-btn">Fetch AGB</button>
  </div>

  <script src="js/leaflet.js"></script>
  <script src="js/leaflet.draw.js"></script>
  <script src="js/main.js"></script>
</body>
</html>

--

body, html {
  margin: 0;
  padding: 0;
  height: 100%;
}

#map {
  width: 100%;
  height: 100%;
}

.sidebar {
  width: 300px;
  background-color: #fff;
  border-left: 1px solid #ddd;
  padding: 16px;
  position: absolute;
  top: 0;
  right: 0;
  height: 100%;
  overflow-y: auto;
  box-shadow: -2px 0 5px rgba(0,0,0,0.1);
}

button {
  margin-top: 8px;
  cursor: pointer;
  background-color: #1976d2;
  color: #fff;
  border: none;
  padding: 8px 12px;
  border-radius: 4px;
}

button:hover {
  background-color: #1565c0;
}

--

// Initialize map
const map = L.map("map").setView([0, 0], 2);

// Satellite Hybrid WMS (Sentinel Hub)
const INSTANCE_ID = "<YOUR_INSTANCE_ID>"; // <-- เปลี่ยนเป็นของคุณ
const wmsUrl = `https://services.sentinel-hub.com/ogc/wms/${INSTANCE_ID}`;

L.tileLayer.wms(wmsUrl, {
  layers: "TRUE_COLOR",
  format: "image/png",
  transparent: false,
  attribution: "Sentinel Hub",
  time: "2025-01-01T00:00:00Z",
  maxZoom: 20
}).addTo(map);

// Leaflet Draw
const drawnItems = new L.FeatureGroup();
map.addLayer(drawnItems);

const drawControl = new L.Control.Draw({
  draw: {
    polyline: false,
    polygon: true,
    rectangle: true,
    circle: false,
    circlemarker: false,
    marker: true
  },
  edit: { featureGroup: drawnItems }
});
map.addControl(drawControl);

// Event: draw created
map.on(L.Draw.Event.CREATED, function (e) {
  drawnItems.clearLayers();
  const layer = e.layer;
  drawnItems.addLayer(layer);

  let info = "";
  if (layer instanceof L.Marker) {
    const lat = layer.getLatLng().lat;
    const lon = layer.getLatLng().lng;
    info = `Point selected:<br>Lat: ${lat.toFixed(6)}<br>Lon: ${lon.toFixed(6)}`;
    map.selectedData = { type: "point", lat, lon };
  } else {
    const bounds = layer.getBounds();
    info = `Area selected:<br>SW: ${bounds.getSouthWest().lat.toFixed(6)}, ${bounds.getSouthWest().lng.toFixed(6)}<br>NE: ${bounds.getNorthEast().lat.toFixed(6)}, ${bounds.getNorthEast().lng.toFixed(6)}`;
    map.selectedData = { type: "bbox", bounds };
  }
  document.getElementById("info").innerHTML = info;
});

// Fetch button → backend
document.getElementById("fetch-btn").addEventListener("click", async () => {
  if (!map.selectedData) return alert("Select a point or area first");

  let payload = {};
  if (map.selectedData.type === "point") {
    payload = { lat: map.selectedData.lat, lon: map.selectedData.lon };
  } else {
    const b = map.selectedData.bounds;
    payload = {
      lat_min: b.getSouthWest().lat,
      lon_min: b.getSouthWest().lng,
      lat_max: b.getNorthEast().lat,
      lon_max: b.getNorthEast().lng
    };
  }

  try {
    const res = await fetch("http://127.0.0.1:8000/api/process", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw new Error("API error");
    const data = await res.json();

    // แสดง sidebar
    let html = "";
    if (map.selectedData.type === "point") {
      html += `Point:<br>Lat: ${payload.lat}<br>Lon: ${payload.lon}<br>`;
    } else {
      html += `Area:<br>SW: ${payload.lat_min}, ${payload.lon_min}<br>NE: ${payload.lat_max}, ${payload.lon_max}<br>`;
    }
    html += "<h3>Indices:</h3>";
    for (const key in data.indices) {
      html += `${key}: ${data.indices[key].toFixed(4)}<br>`;
    }
    html += `<h3>AGB:</h3>${data.agb.toFixed(2)}`;
    document.getElementById("info").innerHTML = html;

  } catch (err) {
    console.error(err);
    alert("Error fetching data from backend");
  }
});

--

/* Leaflet core */
.leaflet-container {
  position: relative;
  overflow: hidden;
  background: #ddd;
}

.leaflet-tile {
  position: absolute;
  width: 256px;
  height: 256px;
}

.leaflet-marker-icon,
.leaflet-marker-shadow {
  position: absolute;
  display: block;
  transform: translate3d(-50%, -50%, 0);
}

.leaflet-popup {
  position: absolute;
  text-align: center;
  line-height: 1.2;
}

.leaflet-control {
  position: relative;
  z-index: 800;
}

.leaflet-bar {
  box-shadow: 0 1px 5px rgba(0,0,0,0.65);
  border-radius: 4px;
}

--

/* Leaflet Draw controls */
.leaflet-draw-toolbar {
  background: #fff;
  padding: 5px;
  border-radius: 4px;
  box-shadow: 0 1px 5px rgba(0,0,0,0.65);
}

.leaflet-draw-toolbar a {
  display: inline-block;
  width: 28px;
  height: 28px;
  text-align: center;
  line-height: 28px;
  cursor: pointer;
}

.leaflet-draw-draw-marker,
.leaflet-draw-draw-rectangle,
.leaflet-draw-draw-polygon {
  background-color: #1976d2;
  color: #fff;
  border-radius: 4px;
}

--

// Leaflet minimal for map + tile
var L = {};
L.map = function(id) {
    const container = document.getElementById(id);
    container.innerHTML = "";
    return {
        setView: function([lat, lon], zoom) {
            this.lat = lat;
            this.lon = lon;
            this.zoom = zoom;
            return this;
        },
        addLayer: function(layer) { this.layer = layer; },
        on: function(event, callback) {
            this._on = callback;
        },
        selectedData: null
    };
};

L.tileLayer = function(url, options) {
    return {
        addTo: function(map) {
            // แค่ placeholder ให้ map รู้จัก
            console.log("TileLayer added: ", url);
        }
    };
};

L.FeatureGroup = function() {
    return {
        addLayer: function(layer){ this.layer = layer; },
        clearLayers: function(){ this.layer = null; }
    };
};

L.Control = {};
L.Control.Draw = function(opts) {
    return { addTo: function(map){ console.log("DrawControl added"); } };
};

L.Draw = { Event: { CREATED: "draw:created" } };

L.Marker = function(latlng) { this.getLatLng = () => latlng; };

--

// Leaflet Draw minimal stub
console.log("Leaflet Draw loaded (stub)");
