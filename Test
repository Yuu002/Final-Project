# -----------------------------
# Endpoint: ดึงค่า Pixel Reflectance + predict models
# -----------------------------
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])
    start = request.json['start']
    end = request.json['end']

    point = ee.Geometry.Point([lon, lat])

    collection = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.first(),
        geometry=point,
        scale=10
    )

    pixel_data = bands.getInfo()

    # -----------------------------
    # Step 1: ดึงค่า Blue, Green, Red, NIR
    # -----------------------------
    try:
        blue = float(pixel_data.get("B2", 0))
        green = float(pixel_data.get("B3", 0))
        red = float(pixel_data.get("B4", 0))
        nir = float(pixel_data.get("B8", 0))
    except:
        return jsonify({"error": "invalid pixel values"})

    # -----------------------------
    # ✅ ปรับสเกล reflectance ให้เหมือน THEOS-1 (0–100%)
    # -----------------------------
    # Physical Gain จาก THEOS-1 (2 Feb 2019)
    G_BLUE = 1.46853
    G_GREEN = 1.50071
    G_RED = 1.71019
    G_NIR = 1.67119

    # แปลง reflectance 0–1 → 0–100 และปรับด้วย gain ของ THEOS
    blue = blue * G_BLUE * 100
    green = green * G_GREEN * 100
    red = red * G_RED * 100
    nir = nir * G_NIR * 100

    # -----------------------------
    # Step 2: MLP → Field Reflectance
    # -----------------------------
    X = np.array([[blue, green, red, nir]])
    X_scaled = scaler_X.transform(X)
    y_pred_scaled = mlp_model.predict(X_scaled)
    field_reflectance = scaler_y.inverse_transform(y_pred_scaled.reshape(1, -1)).ravel()

    field_blue, field_green, field_red, field_nir = field_reflectance

    # -----------------------------
    # Step 3: คำนวณดัชนี 5 ตัว
    # -----------------------------
    indices = calculate_indices(field_blue, field_green, field_red, field_nir)

    # -----------------------------
    # Step 4: SVR → Predict AGB
    # -----------------------------
    idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    idx_scaled = svr_scaler_X.transform(idx_vals)
    agb_scaled = svr_model.predict(idx_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

    # -----------------------------
    # รวมผลลัพธ์
    # -----------------------------
    pixel_data.update({
        "theos_scaled_reflectance": {
            "Blue": blue,
            "Green": green,
            "Red": red,
            "NIR": nir
        },
        "field_reflectance": {
            "Blue": field_blue,
            "Green": field_green,
            "Red": field_red,
            "NIR": field_nir
        },
        "indices": indices,
        "AGB": agb
    })

    return jsonify(pixel_data)
