import joblib
import numpy as np
import requests
from app.utils.indices import calculate_indices

# โหลดโมเดล
mlp_model = joblib.load("app/models/mlp_model.pkl")
scaler_X = joblib.load("app/models/scaler_mlp_X.pkl")
scaler_y = joblib.load("app/models/scaler_mlp_y.pkl")
svr_agb = joblib.load("app/models/svr_agb_model.pkl")
scaler_agb_X = joblib.load("app/models/scaler_svr_X.pkl")

SENTINEL_HUB_URL = "https://services.sentinel-hub.com/api/v1/process"  # ตัวอย่าง
INSTANCE_ID = "fbc0987..."  # ใส่ของคุณ

def get_raw_bands(lat, lon, date="2019-02-02"):
    """
    ดึง raw DN ของ Red (B04) และ NIR (B08) จาก Sentinel Hub
    """
    payload = {
        "input": {
            "bounds": {"geometry": {"type":"Point","coordinates":[lon, lat]}},
            "data":[{"type":"S2L1C","dataFilter":{"timeRange":{"from":f"{date}T00:00:00Z","to":f"{date}T23:59:59Z"}}}]
        },
        "output":{"responses":[{"identifier":"default","format":{"type":"JSON"}}]}
    }
    headers = {"Authorization": f"Bearer {INSTANCE_ID}"}

    r = requests.post(SENTINEL_HUB_URL, json=payload, headers=headers, timeout=30)
    r.raise_for_status()
    data = r.json()

    # สมมติ data['BANDS'] เป็น dict {'B04': value, 'B08': value}
    red = data['BANDS']['B04']
    nir = data['BANDS']['B08']
    return float(red), float(nir)
    

def run_pipeline(lat, lon, date="2019-02-02"):
    red, nir = get_raw_bands(lat, lon, date)
    
    # ดึง output จาก MLP
    X_input = np.array([[red, nir]])  # ถ้า MLP ต้อง 4 band ปรับเพิ่มค่า mock/0
    X_scaled = scaler_X.transform(X_input)
    y_scaled = mlp_model.predict(X_scaled)
    y_pred = scaler_y.inverse_transform(y_scaled)
    
    # คำนวณ indices
    indices = calculate_indices(red, nir)
    
    # คำนวณ AGB
    X_agb = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    X_agb_scaled = scaler_agb_X.transform(X_agb)
    agb_pred = svr_agb.predict(X_agb_scaled)[0]
    
    return {
        "red": red,
        "nir": nir,
        "indices": indices,
        "agb": float(agb_pred)
    }

--

from fastapi import APIRouter
from pydantic import BaseModel
from app.services.ml_pipeline import run_pipeline

router = APIRouter()

class ProcessRequest(BaseModel):
    lat: float
    lon: float
    date: str = "2019-02-02"

@router.post("/process")
def process_data(req: ProcessRequest):
    result = run_pipeline(req.lat, req.lon, req.date)
    return result
