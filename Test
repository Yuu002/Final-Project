from flask import Flask, render_template, request, jsonify
import ee
import joblib
import numpy as np
from indices import calculate_indices  # ฟังก์ชันคำนวณดัชนี

# -----------------------------
# Initialize Earth Engine
# -----------------------------
ee.Initialize(project='map-web-473508')

app = Flask(__name__)

# -----------------------------
# โหลดโมเดลและ Scaler
# -----------------------------
mlp_model = joblib.load("mlp_model.pkl")
scaler_X = joblib.load("scaler_X.save")
scaler_y = joblib.load("scaler_y.save")

svr_model = joblib.load("svr_agb_model.pkl")
svr_scaler_X = joblib.load("svr_scaler_X.save")
svr_scaler_y = joblib.load("svr_scaler_y.save")


# -----------------------------
# Cloud Mask Function (Sentinel-2 SR → Reflectance 0–100)
# -----------------------------
def mask_s2_clouds_reflectance(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0) \
           .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    reflectance = image.divide(10000).multiply(100)
    return reflectance.updateMask(mask)


# -----------------------------
# Cloud Mask + DN scale (Sentinel-2 → THEOS-style DN 0–100)
# -----------------------------
def mask_s2_clouds_dn(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0) \
           .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    dn_image = image.divide(10000).multiply(100).toUint16()
    return dn_image.updateMask(mask)


# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')


# -----------------------------
# Endpoint: ดึง Sentinel-2 และ THEOS-style map tiles
# -----------------------------
@app.route('/get_map', methods=['POST'])
def get_map():
    start = request.json['start']
    end = request.json['end']

    # Sentinel Reflectance Map
    collection_ref = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                      .filterDate(start, end)
                      .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                      .map(mask_s2_clouds_reflectance))
    image_ref = collection_ref.mean()

    vis_sentinel = {'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 100, 'gamma': 1.0}
    map_id_sentinel = ee.Image(image_ref).getMapId(vis_sentinel)

    # THEOS-style DN Map
    collection_dn = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                     .filterDate(start, end)
                     .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                     .map(mask_s2_clouds_dn))
    image_dn = collection_dn.mean()

    vis_theos = {'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 100, 'gamma': 1.0}
    map_id_theos = ee.Image(image_dn).getMapId(vis_theos)

    return jsonify({
        'sentinel_url': map_id_sentinel['tile_fetcher'].url_format,
        'theos_url': map_id_theos['tile_fetcher'].url_format
    })


# -----------------------------
# Endpoint: ดึงค่า Pixel Reflectance 0–100 + process
# -----------------------------
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])
    start = request.json['start']
    end = request.json['end']

    point = ee.Geometry.Point([lon, lat])

    collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate(start, end)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(mask_s2_clouds_reflectance))

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.first(),
        geometry=point,
        scale=10
    )

    pixel_data = bands.getInfo()

    try:
        blue = float(pixel_data.get("B2", 0))
        green = float(pixel_data.get("B3", 0))
        red = float(pixel_data.get("B4", 0))
        nir = float(pixel_data.get("B8", 0))
    except:
        return jsonify({"error": "Invalid pixel data"})

    # ---- Step 1: MLP → Field Reflectance ----
    X = np.array([[blue, green, red, nir]])
    X_scaled = scaler_X.transform(X)
    field_ref_scaled = mlp_model.predict(X_scaled)
    field_ref = scaler_y.inverse_transform(field_ref_scaled.reshape(-1, 1)).ravel()[0]

    # ---- Step 2: ดัชนีพืชพรรณ 5 ตัว ----
    indices = calculate_indices(blue, green, red, nir)

    # ---- Step 3: SVR → Predict AGB ----
    idx_vals = np.array([[indices[k] for k in indices]])
    idx_scaled = svr_scaler_X.transform(idx_vals)
    agb_scaled = svr_model.predict(idx_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

    pixel_data.update({
        "field_reflectance": field_ref,
        "indices": indices,
        "AGB": agb
    })

    return jsonify(pixel_data)


# -----------------------------
if __name__ == '__main__':
    app.run(debug=True)

--

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>AGB Estimation Web App</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    #map { width: 70%; height: 100vh; float: left; }
    #sidebar {
      width: 30%; height: 100vh; float: left; overflow-y: auto;
      padding: 15px; background: #f9f9f9; border-left: 1px solid #ddd;
    }
    h2 { margin-top: 0; }
    label { display: block; margin-top: 10px; font-weight: bold; }
    input { width: 100%; padding: 5px; margin-top: 5px; }
    button { margin-top: 10px; padding: 8px 12px; cursor: pointer; }
    hr { margin: 15px 0; }
    p { margin: 4px 0; }
  </style>
</head>
<body>
  <div id="map"></div>
  <div id="sidebar">
    <h2>AGB Estimation</h2>
    <label for="start">Start Date</label>
    <input type="date" id="start" value="2020-01-01">
    <label for="end">End Date</label>
    <input type="date" id="end" value="2020-12-31">
    <button onclick="loadMap()">Load Map</button>
    <hr>
    <div id="pixelData">
      <p><strong>Pixel Data:</strong></p>
      <p id="bands">Bands: -</p>

      <hr>
      <p><strong>Field Reflectance (ภาคสนาม)</strong></p>
      <p id="field_reflectance">-</p>

      <hr>
      <p><strong>Vegetation Indices</strong></p>
      <p id="ndvi">NDVI: -</p>
      <p id="tndvi">TNDVI: -</p>
      <p id="sr">SR: -</p>
      <p id="savi">SAVI: -</p>
      <p id="msavi2">MSAVI2: -</p>

      <hr>
      <p><strong>Estimated AGB</strong></p>
      <p id="agb">AGB: -</p>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <script>
    let map, sentinelLayer, theosLayer;

    function initMap() {
      map = L.map('map').setView([15, 100], 6);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors'
      }).addTo(map);

      map.on('click', function(e) {
        const lat = e.latlng.lat;
        const lon = e.latlng.lng;
        getPixelData(lat, lon);
      });
    }

    function loadMap() {
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;

      fetch('/get_map', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ start, end })
      })
      .then(r => r.json())
      .then(data => {
        if(sentinelLayer) map.removeLayer(sentinelLayer);
        if(theosLayer) map.removeLayer(theosLayer);

        sentinelLayer = L.tileLayer(data.sentinel_url, { attribution: 'Sentinel-2' }).addTo(map);
        theosLayer = L.tileLayer(data.theos_url, { attribution: 'THEOS-style' });

        L.control.layers({ "Sentinel-2": sentinelLayer, "THEOS-style": theosLayer }).addTo(map);
      });
    }

    function getPixelData(lat, lon) {
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;

      fetch('/get_pixel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ lat, lon, start, end })
      })
      .then(r => r.json())
      .then(pixel => {
        const formatVal = v => (v !== null && v !== undefined) ? v.toFixed(4) : "-";

        document.getElementById('bands').innerText =
          `B2: ${formatVal(pixel.B2)} | B3: ${formatVal(pixel.B3)} | B4: ${formatVal(pixel.B4)} | B8: ${formatVal(pixel.B8)}`;

        document.getElementById('field_reflectance').innerText =
          `Field Reflectance: ${formatVal(pixel.field_reflectance)}`;

        if(pixel.indices){
          document.getElementById('ndvi').innerText   = `NDVI: ${formatVal(pixel.indices.NDVI)}`;
          document.getElementById('tndvi').innerText  = `TNDVI: ${formatVal(pixel.indices.TNDVI)}`;
          document.getElementById('sr').innerText     = `SR: ${formatVal(pixel.indices.SR)}`;
          document.getElementById('savi').innerText   = `SAVI: ${formatVal(pixel.indices.SAVI)}`;
          document.getElementById('msavi2').innerText = `MSAVI2: ${formatVal(pixel.indices.MSAVI2)}`;
        }

        document.getElementById('agb').innerText =
          `AGB: ${formatVal(pixel.AGB)}`;
      });
    }

    initMap();
  </script>
</body>
</html>
