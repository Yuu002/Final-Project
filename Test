<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sentinel-2 Viewer</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css"/>
  <style>
    body { margin:0; font-family: Inter, sans-serif; background:#0f172a; color:#e2e8f0; }
    #map { height: 100vh; width: calc(100% - 420px); float: left; }
    #sidebar { width: 420px; height: 100vh; float: right; background:#1e293b; overflow-y:auto; padding:20px; }
    button { width:100%; padding:12px; margin-top:8px; background:#2563eb; color:white; border:none; border-radius:8px; cursor:pointer; }
    input { width:100%; margin-bottom:10px; padding:10px; border-radius:6px; border:1px solid #334155; background:#0f172a; color:white; }
    .data-card { background:#0f172a; padding:8px; border-radius:6px; margin-top:6px; }
  </style>
</head>

<body>
  <div id="map"></div>
  <div id="sidebar">
    <h2>üõ∞Ô∏è Sentinel-2 Viewer</h2>

    <h3>1Ô∏è‚É£ Date Range</h3>
    <input type="date" id="start" value="2020-01-01">
    <input type="date" id="end" value="2020-01-15">
    <button id="loadMap">üåç Load Map</button>

    <h3>2Ô∏è‚É£ Mode</h3>
    <button id="modePoint">üìç Point Mode</button>
    <button id="modeArea">üó∫Ô∏è Area Mode</button>

    <div id="info" style="margin-top:15px;">
      <h3>üìä Results</h3>
      <div id="results"></div>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js"></script>
  <script>
    let map = L.map('map').setView([19.2, 100.1], 10);
    let baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
    let marker, rectangle, currentMode = 'point';
    let drawnItems = new L.FeatureGroup().addTo(map);
    let sentinelLayer, theosLayer;

    // ---- Draw Control ----
    const drawControl = new L.Control.Draw({
      edit: { featureGroup: drawnItems, remove: true },
      draw: { rectangle: true, polygon: false, polyline: false, circle: false, marker: false }
    });
    map.addControl(drawControl);

    document.getElementById('modePoint').onclick = () => currentMode = 'point';
    document.getElementById('modeArea').onclick = () => currentMode = 'area';

    // ---- Load Map ----
    document.getElementById('loadMap').onclick = async () => {
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;
      const res = await fetch('/get_map', {
        method: 'POST', headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ start, end })
      });
      const data = await res.json();
      if(sentinelLayer) map.removeLayer(sentinelLayer);
      sentinelLayer = L.tileLayer(data.sentinel_url, { attribution: 'Sentinel-2' }).addTo(map);
      console.log("üõ∞Ô∏è Map loaded:", data);
    };

    // ---- Point Click ----
    map.on('click', async (e) => {
      if(currentMode !== 'point') return;
      const lat = e.latlng.lat, lon = e.latlng.lng;
      if(marker) map.removeLayer(marker);
      marker = L.marker([lat, lon]).addTo(map);
      await getPixelData(lat, lon);
    });

    // ---- Draw Rectangle ----
    map.on(L.Draw.Event.CREATED, async (e) => {
      if(currentMode !== 'area') return;
      drawnItems.clearLayers();
      rectangle = e.layer;
      drawnItems.addLayer(rectangle);
      const b = rectangle.getBounds();
      const area = {
        sw_lat: b.getSouthWest().lat,
        sw_lon: b.getSouthWest().lng,
        ne_lat: b.getNorthEast().lat,
        ne_lon: b.getNorthEast().lng
      };
      await getAreaData(area);
    });

    // ---- API Calls ----
    async function getPixelData(lat, lon) {
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;
      try {
        const res = await fetch('/get_pixel', {
          method: 'POST', headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ lat, lon, start, end })
        });
        const data = await res.json();
        if (data.error) { showError("Invalid pixel"); return; }
        updateResults(data);
      } catch (err) {
        showError("Pixel request failed");
      }
    }

    async function getAreaData(area) {
      const start = document.getElementById('start').value;
      const end = document.getElementById('end').value;
      try {
        const res = await fetch('/get_area', {
          method: 'POST', headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ area, start, end })
        });
        const data = await res.json();
        if (data.error) { showError("Area error"); return; }
        updateResults(data);
      } catch (err) {
        showError("Area request failed");
      }
    }

    // ---- Display ----
    function updateResults(data) {
      const refl = data.field_reflectance;
      const idx = data.indices;
      document.getElementById('results').innerHTML = `
        <div class="data-card"><b>Reflectance</b><br>
          Blue: ${refl.Blue.toFixed(3)}<br>
          Green: ${refl.Green.toFixed(3)}<br>
          Red: ${refl.Red.toFixed(3)}<br>
          NIR: ${refl.NIR.toFixed(3)}
        </div>
        <div class="data-card"><b>Indices</b><br>
          NDVI: ${idx.NDVI.toFixed(3)}<br>
          TNDVI: ${idx.TNDVI.toFixed(3)}<br>
          SR: ${idx.SR.toFixed(3)}<br>
          SAVI: ${idx.SAVI.toFixed(3)}<br>
          MSAVI2: ${idx.MSAVI2.toFixed(3)}
        </div>
        <div class="data-card"><b>AGB:</b> ${data.AGB.toFixed(2)}</div>
      `;
    }

    function showError(msg) {
      document.getElementById('results').innerHTML = `<div style="color:red;">‚ö†Ô∏è ${msg}</div>`;
    }
  </script>
</body>
</html>
