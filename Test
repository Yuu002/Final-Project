from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import os
import numpy as np
from indices import calculate_indices

app = FastAPI()

# ===== path dynamic =====
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

MLP_MODEL_PATH = os.path.join(BASE_DIR, "mlp_model.pkl")
SCALER_MLP_X_PATH = os.path.join(BASE_DIR, "scaler_mlp_X.pkl")
SCALER_MLP_Y_PATH = os.path.join(BASE_DIR, "scaler_mlp_y.pkl")
SVR_AGB_MODEL_PATH = os.path.join(BASE_DIR, "svr_agb_model.pkl")
SCALER_SVR_X_PATH = os.path.join(BASE_DIR, "scaler_svr_X.pkl")

# ===== load models =====
mlp_model = joblib.load(MLP_MODEL_PATH)
scaler_mlp_X = joblib.load(SCALER_MLP_X_PATH)
scaler_mlp_y = joblib.load(SCALER_MLP_Y_PATH)
svr_agb_model = joblib.load(SVR_AGB_MODEL_PATH)
scaler_svr_X = joblib.load(SCALER_SVR_X_PATH)

# ===== debug =====
print("BASE_DIR =", BASE_DIR)
print("Files in BASE_DIR:", os.listdir(BASE_DIR))

# ===== Schema =====
class SentinelInput(BaseModel):
    bands: list[float]  # [Band1, Band2, Band3, Band4] จาก Sentinel

# ===== ฟังก์ชัน scale bands 40-78 =====
def scale_bands_to_range(bands, min_val=40, max_val=78):
    bands = np.array(bands, dtype=float)
    if bands.max() - bands.min() == 0:
        # ถ้าทุกค่าเท่ากัน จะ return ค่ากลาง
        return np.full_like(bands, (min_val+max_val)//2, dtype=int)
    bands_norm = (bands - bands.min()) / (bands.max() - bands.min())
    bands_scaled = bands_norm * (max_val - min_val) + min_val
    return np.round(bands_scaled).astype(int)

# ===== Endpoint =====
@app.post("/predict_all")
def predict_all(data: SentinelInput):
    # 1. scale Sentinel bands → 40–78
    sentinel_bands_int = scale_bands_to_range(data.bands, 40, 78)
    
    # 2. MLP → Ground bands
    X_scaled = scaler_mlp_X.transform([sentinel_bands_int])
    ground_bands_scaled = mlp_model.predict(X_scaled)
    ground_bands = scaler_mlp_y.inverse_transform(ground_bands_scaled)[0]

    # 3. scale Ground bands → 40–78 integer
    ground_bands_int = scale_bands_to_range(ground_bands, 40, 78)
    blue, green, red, nir = ground_bands_int

    # 4. คำนวณ indices
    indices = calculate_indices(red=red, nir=nir, blue=blue, green=green)

    # 5. SVR → AGB
    indices_array = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"],
                               indices["SAVI"], indices["MSAVI2"]]])
    indices_scaled = scaler_svr_X.transform(indices_array)
    agb_pred = svr_agb_model.predict(indices_scaled)[0]

    return {
        "sentinel_bands": sentinel_bands_int.tolist(),
        "ground_bands": {
            "Blue": int(blue),
            "Green": int(green),
            "Red": int(red),
            "NIR": int(nir)
        },
        "indices": indices,
        "AGB_prediction": float(agb_pred)
    }

# ===== run uvicorn =====
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=False)
