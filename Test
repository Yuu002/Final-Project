@app.route('/get_area', methods=['POST'])
def get_area():
    data = request.get_json(force=True)
    coords = data['coords']
    start = data['start']
    end = data['end']

    # ✅ รองรับพิกัดจาก leaflet
    if isinstance(coords[0][0], list):
        polygon = ee.Geometry.Polygon(coords)
    else:
        polygon = ee.Geometry.Polygon([coords])

    # ✅ โหลดภาพ Sentinel-2 แล้วกรองตามวันที่และเมฆ
    collection = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )

    # ✅ เฉลี่ยภาพตลอดช่วงเวลา
    image = collection.mean()

    # ✅ คำนวณค่าเฉลี่ยเชิงพื้นที่ของแต่ละ band ใน polygon
    mean_sum_count = image.reduceRegion(
        reducer=ee.Reducer.sum().combine(
            reducer2=ee.Reducer.count(),
            sharedInputs=True
        ),
        geometry=polygon,
        scale=10,
        maxPixels=1e9,
        tileScale=4
    ).getInfo()

    def calc_mean(band):
        s = mean_sum_count.get(f"{band}_sum", 0)
        c = mean_sum_count.get(f"{band}_count", 0)
        if not c or s is None:
            return None
        return float(s) / float(c)

    blue = calc_mean("B2")
    green = calc_mean("B3")
    red = calc_mean("B4")
    nir = calc_mean("B8")

    # ✅ ตรวจว่ามีค่าครบหรือไม่
    if None in (blue, green, red, nir):
        return jsonify({'error': 'No valid pixel values found in this area.'})

    # ---- Pipeline model ตามปกติ ----
    X = np.array([[blue, green, red, nir]])
    X_scaled = scaler_X.transform(X)
    y_pred_scaled = mlp_model.predict(X_scaled)
    field_reflectance = scaler_y.inverse_transform(y_pred_scaled)

    ref_X_scaled = ref_scaler_X.transform(field_reflectance)
    ref_y_pred_scaled = ref_model.predict(ref_X_scaled)
    ref_field_reflectance = ref_scaler_y.inverse_transform(ref_y_pred_scaled)
    ref_blue, ref_green, ref_red, ref_nir = ref_field_reflectance.ravel()

    indices = calculate_indices(ref_blue, ref_green, ref_red, ref_nir)

    idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    idx_scaled = svr_scaler_X.transform(idx_vals)
    agb_scaled = svr_model.predict(idx_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

    # ✅ เพิ่มข้อมูลขนาดพื้นที่จาก GEE
    area_sqm = polygon.area().getInfo()
    area_ha = area_sqm / 10000
    area_rai = area_sqm / 1600

    return jsonify({
        "mean_reflectance": {
            "Blue": blue,
            "Green": green,
            "Red": red,
            "NIR": nir
        },
        "field_reflectance": {
            "Blue": ref_blue,
            "Green": ref_green,
            "Red": ref_red,
            "NIR": ref_nir
        },
        "indices": indices,
        "AGB_mean": agb,
        "area": {
            "sqm": area_sqm,
            "hectare": area_ha,
            "rai": area_rai
        }
    })
