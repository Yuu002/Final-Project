<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Satellite Time Machine</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        height: 100vh;
        overflow: hidden;
    }

    #map {
        width: 100%;
        height: 100vh;
    }

    .controls {
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        min-width: 300px;
    }

    .controls h2 {
        font-size: 18px;
        margin-bottom: 15px;
        color: #333;
    }

    .control-group {
        margin-bottom: 15px;
    }

    .control-group label {
        display: block;
        font-size: 13px;
        color: #666;
        margin-bottom: 5px;
        font-weight: 500;
    }

    .control-group input[type="date"] {
        width: 100%;
        padding: 10px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.3s;
    }

    .control-group input[type="date"]:focus {
        outline: none;
        border-color: #4CAF50;
    }

    .btn {
        width: 100%;
        padding: 12px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }

    .btn:active {
        transform: translateY(0);
    }

    .btn:disabled {
        background: #ccc;
        cursor: not-allowed;
        transform: none;
    }

    .info {
        margin-top: 15px;
        padding: 12px;
        background: #f5f5f5;
        border-radius: 6px;
        font-size: 12px;
        color: #666;
        line-height: 1.5;
    }

    .loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 20px 40px;
        border-radius: 8px;
        z-index: 2000;
        display: none;
    }

    .loading.active {
        display: block;
    }

    .current-date {
        margin-top: 10px;
        padding: 10px;
        border-radius: 6px;
        font-size: 13px;
        text-align: center;
        font-weight: 500;
    }

    .current-date.success {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .current-date.fallback {
        background: #fff3e0;
        color: #e65100;
    }

    .status-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 600;
        margin-left: 8px;
    }

    .status-badge.satellite {
        background: #4CAF50;
        color: white;
    }

    .status-badge.map {
        background: #FF9800;
        color: white;
    }

    @media (max-width: 768px) {
        .controls {
            top: 10px;
            right: 10px;
            left: 10px;
            min-width: auto;
        }
    }
</style>
```

</head>
<body>
    <div id="map"></div>
    <div class="loading" id="loading">Searching for satellite imagery...</div>

```
<div class="controls">
    <h2>üõ∞Ô∏è Satellite Time Machine</h2>
    
    <div class="control-group">
        <label for="dateInput">Select Date:</label>
        <input type="date" id="dateInput" min="2015-06-23" max="2025-09-30">
    </div>
    
    <button class="btn" id="updateBtn" onclick="updateSatelliteImage()">Update Imagery</button>
    
    <div class="current-date success" id="currentDate">
        Current: Google Maps <span class="status-badge map">MAP</span>
    </div>
    
    <div class="info">
        üìç Pan and zoom to explore anywhere<br>
        üõ∞Ô∏è Sentinel-2 satellite imagery<br>
        üìÖ Available from June 2015<br>
        üó∫Ô∏è Falls back to Google Maps if unavailable
    </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
    let map = L.map('map').setView([40.7128, -74.0060], 12); // New York

    let currentLayer = null;
    let currentDate = new Date().toISOString().split('T')[0];
    let isShowingSatellite = false;

    document.getElementById('dateInput').value = currentDate;
    document.getElementById('dateInput').max = currentDate;

    // Start with Google Maps satellite
    function loadGoogleMaps() {
        if (currentLayer) {
            map.removeLayer(currentLayer);
        }

        currentLayer = L.tileLayer('https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
            attribution: '¬© Google',
            maxZoom: 20,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
        }).addTo(map);

        return currentLayer;
    }

    // Initialize with Google Maps
    loadGoogleMaps();

    function updateStatusDisplay(date, isSatellite) {
        const statusEl = document.getElementById('currentDate');
        
        if (isSatellite) {
            statusEl.className = 'current-date success';
            statusEl.innerHTML = `Viewing: ${date} <span class="status-badge satellite">SENTINEL-2</span>`;
        } else {
            statusEl.className = 'current-date fallback';
            statusEl.innerHTML = `No imagery for ${date}<br><small>Showing Google Maps instead</small> <span class="status-badge map">MAP</span>`;
        }
    }

    async function updateSatelliteImage() {
        const dateInput = document.getElementById('dateInput').value;
        if (!dateInput) {
            alert('Please select a date');
            return;
        }

        document.getElementById('loading').classList.add('active');
        document.getElementById('updateBtn').disabled = true;

        // Remove current layer
        if (currentLayer) {
            map.removeLayer(currentLayer);
        }

        let tilesLoaded = 0;
        let tilesErrored = 0;
        let checkComplete = false;

        // Try Sentinel-2 from EOX
        const sentinelLayer = L.tileLayer(
            `https://tiles.maps.eox.at/wmts/1.0.0/s2cloudless-2020_3857_512/default/g/{z}/{y}/{x}.jpg`,
            {
                attribution: '¬© Sentinel-2 cloudless by EOX',
                maxZoom: 18,
                tileSize: 512
            }
        );

        // Also try time-based Sentinel Hub
        const dateFormatted = dateInput;
        const sentinelTimeLayer = L.tileLayer(
            `https://services.sentinel-hub.com/ogc/wms/42924c6c-257a-4d04-9b8e-36387513a99c?SERVICE=WMS&REQUEST=GetMap&LAYERS=TRUE-COLOR&STYLES=&FORMAT=image/jpeg&TRANSPARENT=false&VERSION=1.3.0&WIDTH=256&HEIGHT=256&CRS=EPSG:3857&BBOX={bbox-epsg-3857}&TIME=${dateFormatted}/${dateFormatted}`,
            {
                attribution: '¬© Copernicus Sentinel-2',
                maxZoom: 18
            }
        );

        const testLayer = sentinelTimeLayer;
        let loadTimeout;

        testLayer.on('tileload', function() {
            tilesLoaded++;
            
            if (tilesLoaded >= 3 && !checkComplete) {
                checkComplete = true;
                clearTimeout(loadTimeout);
                document.getElementById('loading').classList.remove('active');
                document.getElementById('updateBtn').disabled = false;
                currentLayer = testLayer;
                isShowingSatellite = true;
                updateStatusDisplay(dateInput, true);
            }
        });

        testLayer.on('tileerror', function() {
            tilesErrored++;
            
            if (tilesErrored >= 5 && !checkComplete) {
                checkComplete = true;
                clearTimeout(loadTimeout);
                map.removeLayer(testLayer);
                
                // Fallback to Google Maps
                loadGoogleMaps();
                isShowingSatellite = false;
                updateStatusDisplay(dateInput, false);
                
                document.getElementById('loading').classList.remove('active');
                document.getElementById('updateBtn').disabled = false;
            }
        });

        testLayer.addTo(map);

        // Set timeout to check if enough tiles loaded
        loadTimeout = setTimeout(() => {
            if (!checkComplete) {
                checkComplete = true;
                
                if (tilesLoaded < 2) {
                    // Not enough tiles loaded, use Google Maps
                    map.removeLayer(testLayer);
                    loadGoogleMaps();
                    isShowingSatellite = false;
                    updateStatusDisplay(dateInput, false);
                } else {
                    // Some tiles loaded, keep satellite view
                    currentLayer = testLayer;
                    isShowingSatellite = true;
                    updateStatusDisplay(dateInput, true);
                }
                
                document.getElementById('loading').classList.remove('active');
                document.getElementById('updateBtn').disabled = false;
            }
        }, 6000);
    }

    document.getElementById('dateInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            updateSatelliteImage();
        }
    });

    // Add layer control
    map.on('click', function(e) {
        console.log(`Coordinates: ${e.latlng.lat.toFixed(5)}, ${e.latlng.lng.toFixed(5)}`);
    });
</script>
```

</body>
</html>
