# -----------------------------
# Cloud Mask Function (Sentinel-2 SR → Surface Reflectance 0–1)
# -----------------------------
def mask_s2_clouds_reflectance(image):
    """Masks clouds in Sentinel-2 SR and scales to reflectance (0–1)."""
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = (
        qa.bitwiseAnd(cloud_bit_mask)
        .eq(0)
        .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    )
    return image.updateMask(mask).divide(10000)  # scale 0–1

# -----------------------------
# Cloud Mask + DN scale (Sentinel-2 → THEOS-style DN 0–100)
# -----------------------------
def mask_s2_clouds_dn(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0).And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    dn_image = image.divide(10000).multiply(100).toUint16()
    return dn_image.updateMask(mask)

# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')

# -----------------------------
# Endpoint: ดึง Sentinel-2 และ THEOS-style map tiles
# -----------------------------
@app.route('/get_map', methods=['POST'])
def get_map():
    start = request.json['start']
    end = request.json['end']

    # Sentinel-2 Surface Reflectance (0–1)
    collection_ref = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )
    image_ref = collection_ref.mean()

    vis_sentinel = {'bands': ['B4', 'B3', 'B2'], 'min': 0.0, 'max': 0.3, 'gamma': 1.0}
    map_id_sentinel = ee.Image(image_ref).getMapId(vis_sentinel)

    # THEOS-style DN
    collection_dn = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_dn)
    )
    image_dn = collection_dn.mean()

    vis_theos = {'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 100, 'gamma': 1.0}
    map_id_theos = ee.Image(image_dn).getMapId(vis_theos)

    return jsonify({
        'sentinel_url': map_id_sentinel['tile_fetcher'].url_format,
        'theos_url': map_id_theos['tile_fetcher'].url_format
    })
