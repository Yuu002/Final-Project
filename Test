<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Satellite Analysis</title>

  <!-- Leaflet -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

  <!-- Leaflet Draw -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css" />
  <script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js"></script>

  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    #controls {
      background: #f8f9fa;
      padding: 10px;
      display: flex;
      gap: 10px;
      align-items: center;
      border-bottom: 1px solid #ccc;
    }
    #map {
      flex: 1;
      width: 100%;
    }
    .info-box {
      position: absolute;
      bottom: 10px;
      left: 10px;
      background: white;
      padding: 10px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
      max-width: 350px;
      font-size: 14px;
      line-height: 1.5;
    }
    .info-box h4 {
      margin-top: 0;
    }
    button {
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div id="controls">
    <label>Start:</label>
    <input type="date" id="start" />
    <label>End:</label>
    <input type="date" id="end" />
    <button id="loadMap">üåç Load Map</button>
    <button id="drawArea">üó∫Ô∏è Draw Area</button>
  </div>

  <div id="map"></div>
  <div id="info" class="info-box" style="display:none;"></div>

  <script>
    // -------------------------
    // Initialize Map
    // -------------------------
    const map = L.map('map').setView([14.5, 100.5], 7);
    let currentTileLayer = null;
    let currentRectangle = null;

    // Default base map
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19
    }).addTo(map);

    // -------------------------
    // Draw Control Setup
    // -------------------------
    const drawnItems = new L.FeatureGroup().addTo(map);
    const drawControl = new L.Control.Draw({
      draw: {
        marker: false,
        polygon: false,
        polyline: false,
        circle: false,
        circlemarker: false,
        rectangle: {
          shapeOptions: {
            color: '#2563eb',
            weight: 2,
            fillOpacity: 0.1
          }
        }
      },
      edit: {
        featureGroup: drawnItems,
        remove: true
      }
    });
    map.addControl(drawControl);

    // -------------------------
    // Load Sentinel Map
    // -------------------------
    document.getElementById("loadMap").onclick = async () => {
      const start = document.getElementById("start").value;
      const end = document.getElementById("end").value;

      if (!start || !end) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô!");
        return;
      }

      try {
        const res = await fetch("/get_map", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ start, end })
        });

        const data = await res.json();
        if (!data.sentinel_url) {
          alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: " + (data.error || "unknown error"));
          return;
        }

        // ‡∏•‡∏ö layer ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        if (currentTileLayer) map.removeLayer(currentTileLayer);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Sentinel-2 Map Tile ‡πÉ‡∏´‡∏°‡πà
        currentTileLayer = L.tileLayer(data.sentinel_url, {
          attribution: "Sentinel-2 Imagery",
          maxZoom: 14
        }).addTo(map);

        alert("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } catch (err) {
        console.error(err);
        alert("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }
    };

    // -------------------------
    // Draw Rectangle Event
    // -------------------------
    document.getElementById("drawArea").onclick = function () {
      new L.Draw.Rectangle(map, drawControl.options.draw.rectangle).enable();
    };

    map.on("draw:created", async function (e) {
      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
      if (currentRectangle) map.removeLayer(currentRectangle);

      currentRectangle = e.layer;
      drawnItems.addLayer(currentRectangle);

      const bounds = currentRectangle.getBounds();
      const sw = bounds.getSouthWest();
      const ne = bounds.getNorthEast();

      const start = document.getElementById("start").value;
      const end = document.getElementById("end").value;

      if (!start || !end) {
        alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå!");
        return;
      }

      const area = {
        sw_lat: sw.lat,
        sw_lon: sw.lng,
        ne_lat: ne.lat,
        ne_lon: ne.lng
      };

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
      try {
        const res = await fetch("/get_area", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ start, end, area })
        });

        const data = await res.json();
        showInfo(data);
      } catch (err) {
        console.error(err);
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ!");
      }
    });

    // -------------------------
    // Display Info
    // -------------------------
    function showInfo(data) {
      const box = document.getElementById("info");
      box.style.display = "block";

      if (data.error) {
        box.innerHTML = `<b style="color:red;">Error:</b> ${data.error}`;
        return;
      }

      box.innerHTML = `
        <h4>üìä Area Analysis</h4>
        <b>Reflectance (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢):</b><br/>
        Blue: ${data.reflectance.Blue.toFixed(4)}<br/>
        Green: ${data.reflectance.Green.toFixed(4)}<br/>
        Red: ${data.reflectance.Red.toFixed(4)}<br/>
        NIR: ${data.reflectance.NIR.toFixed(4)}<br/><br/>
        <b>Indices:</b><br/>
        NDVI: ${data.indices.NDVI.toFixed(4)}<br/>
        SAVI: ${data.indices.SAVI.toFixed(4)}<br/>
        MSAVI2: ${data.indices.MSAVI2.toFixed(4)}<br/>
        TNDVI: ${data.indices.TNDVI.toFixed(4)}<br/>
        SR: ${data.indices.SR.toFixed(4)}<br/><br/>
        <b>AGB:</b> ${data.AGB.toFixed(4)}
      `;
    }
  </script>
</body>
</html>
