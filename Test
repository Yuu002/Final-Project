# bands_indices.py
import rasterio
import numpy as np
from pyproj import Transformer

def compute_bands_and_indices(raster_path, lat, lon, width_m=10, height_m=12):
    """
    - raster_path: path to TIFF image
    - lat, lon: center coordinate (WGS84)
    - width_m, height_m: size of plot in meters
    Returns:
        bands_dict: dict of mean values of Blue, Green, Red, NIR
        indices_dict: dict of NDVI, TNDVI, SR, SAVI, MSAVI2
    """
    # --- Open raster ---
    with rasterio.open(raster_path) as src:
        crs = src.crs
        transform = src.transform
        res_x, res_y = src.res
        data = src.read([1,2,3,4])  # Blue, Green, Red, NIR
        nodata = src.nodata

    # --- Transform lat/lon to raster CRS ---
    transformer = Transformer.from_crs("EPSG:4326", crs, always_xy=True)
    x_center, y_center = transformer.transform(lon, lat)

    # --- Convert meters to pixels ---
    col_center, row_center = ~transform * (x_center, y_center)
    col_center = int(round(col_center))
    row_center = int(round(row_center))
    half_w_px = int(round(width_m / res_x / 2))
    half_h_px = int(round(height_m / abs(res_y) / 2))

    # --- Define window ---
    row_start = max(0, row_center - half_h_px)
    row_end = min(data.shape[1], row_center + half_h_px)
    col_start = max(0, col_center - half_w_px)
    col_end = min(data.shape[2], col_center + half_w_px)

    window = data[:, row_start:row_end, col_start:col_end]

    # --- Compute mean per band ---
    bands_dict = {}
    band_names = ["Blue", "Green", "Red", "NIR"]
    for i, name in enumerate(band_names):
        band_data = window[i]
        if nodata is not None:
            band_data = band_data[band_data != nodata]
        if band_data.size == 0:
            mean_val = np.nan
        else:
            mean_val = float(np.mean(band_data))
        bands_dict[name] = mean_val

    # --- Compute indices (NDVI, TNDVI, SR, SAVI, MSAVI2) ---
    R = bands_dict["Red"]
    NIR = bands_dict["NIR"]
    L = 0.5

    # Avoid nan/divide issues
    epsilon = 1e-6
    NDVI = (NIR - R) / (NIR + R + epsilon)
    TNDVI = np.sqrt(NDVI + L)
    SR = NIR / (R + epsilon)
    SAVI = ((1+L)*(NIR - R)) / (NIR + R + L + epsilon)
    MSAVI2 = (2*NIR + 1 - np.sqrt((2*NIR +1)**2 - 8*(NIR - R))) / 2

    indices_dict = {
        "NDVI": NDVI,
        "TNDVI": TNDVI,
        "SR": SR,
        "SAVI": SAVI,
        "MSAVI2": MSAVI2
    }

    return bands_dict, indices_dict
