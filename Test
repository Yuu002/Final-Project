# -----------------------------
# Endpoint: ดึงค่า Reflectance เฉลี่ยของพื้นที่ + Predict AGB
# -----------------------------
@app.route('/get_area', methods=['POST'])
def get_area():
    coords = request.json['coords']  # [[lon, lat], [lon, lat], ...]
    start = request.json['start']
    end = request.json['end']

    # สร้าง Polygon geometry จาก coords
    polygon = ee.Geometry.Polygon([coords])

    # ดึงภาพ Sentinel-2 ช่วงเวลาที่เลือก
    collection = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )

    image = collection.mean()

    # -----------------------------
    # ดึงค่าเฉลี่ยของ band ต่าง ๆ ในพื้นที่
    # -----------------------------
    mean_dict = image.reduceRegion(
        reducer=ee.Reducer.mean(),
        geometry=polygon,
        scale=10,
        maxPixels=1e9
    ).getInfo()

    try:
        blue = float(mean_dict.get("B2", 0))
        green = float(mean_dict.get("B3", 0))
        red = float(mean_dict.get("B4", 0))
        nir = float(mean_dict.get("B8", 0))
    except:
        return jsonify({"error": "invalid area reflectance values"})

    # -----------------------------
    # Step 2: MLP → Field Reflectance
    # -----------------------------
    X = np.array([[blue, green, red, nir]])
    X_scaled = scaler_X.transform(X)
    y_pred_scaled = mlp_model.predict(X_scaled)
    field_reflectance = scaler_y.inverse_transform(y_pred_scaled)

    # -----------------------------
    # Step 2.5: REF → Cor Field Reflectance
    # -----------------------------
    ref_X_scaled = ref_scaler_X.transform(field_reflectance)
    ref_y_pred_scaled = ref_model.predict(ref_X_scaled)
    ref_field_reflectance = ref_scaler_y.inverse_transform(ref_y_pred_scaled)

    ref_blue, ref_green, ref_red, ref_nir = ref_field_reflectance.ravel()

    # -----------------------------
    # Step 3: คำนวณดัชนี 5 ตัว
    # -----------------------------
    indices = calculate_indices(ref_blue, ref_green, ref_red, ref_nir)

    # -----------------------------
    # Step 4: SVR → Predict AGB
    # -----------------------------
    idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    idx_scaled = svr_scaler_X.transform(idx_vals)
    agb_scaled = svr_model.predict(idx_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

    # -----------------------------
    # รวมผลลัพธ์
    # -----------------------------
    result = {
        "mean_reflectance": {
            "Blue": blue,
            "Green": green,
            "Red": red,
            "NIR": nir
        },
        "field_reflectance": {
            "Blue": ref_blue,
            "Green": ref_green,
            "Red": ref_red,
            "NIR": ref_nir
        },
        "indices": indices,
        "AGB_mean": agb
    }

    return jsonify(result)
