from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
import os

from backend.utils.sentinelhub_api import fetch_bands_from_sentinelhub
from backend.utils.preprocess import mlp_predict_from_ints, svr_predict_agb
from backend.indices import compute_indices

app = FastAPI(title="Sentinel -> MLP -> Indices -> AGB API")

# เปิด CORS เพื่อให้ frontend ที่รัน port ต่างกันเรียกได้
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/predict")
async def predict(lat: float, lng: float, mode: Optional[str] = "mock"):
    """
    GET /predict?lat=13.7563&lng=100.5018
    - ดึงค่า bands integer จาก Sentinel Hub (หรือ mock)
    - ส่งค่าเข้า MLP -> ได้ predicted bands float
    - คำนวณ indices
    - ทำนาย AGB
    """
    # 1) ดึง integer จาก Sentinel Hub (mock)
    instance_id = os.getenv("SENTINELHUB_INSTANCE_ID")
    api_key = os.getenv("SENTINELHUB_API_KEY")
    bands_int = fetch_bands_from_sentinelhub(lat, lng, instance_id, api_key)

    if not bands_int:
        raise HTTPException(status_code=500, detail="No bands from sentinelhub")

    # 2) MLP predict
    bands_pred = mlp_predict_from_ints(bands_int)

    # 3) คำนวณ indices
    indices = compute_indices(bands_pred)

    # 4) ทำนาย AGB
    agb = svr_predict_agb(indices)

    # 5) return response
    response = {
        "coordinates": {"lat": round(lat,6), "lng": round(lng,6)},
        "bands_predicted": bands_pred,
        "indices": indices,
        "agb": {"value": agb, "unit": "Mg/ha"},
        "bands_input_int": bands_int  # optional: ส่งคืน input int จาก SentinelHub
    }

    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("backend.main:app", host="0.0.0.0", port=8000, reload=True)
