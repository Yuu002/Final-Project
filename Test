# app.py
import streamlit as st
import pandas as pd
import joblib
import tempfile
from bands_indices import compute_bands_and_indices  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á bands+indices

st.set_page_config(page_title="AGB Predictor", layout="centered")
st.title("üåø AGB Prediction from Satellite Image")

# --- 1. Upload raster ---
uploaded_file = st.file_uploader("Upload Satellite Image (TIFF)", type=["tif", "tiff"])
raster_path = None
if uploaded_file:
    # save temp file
    with tempfile.NamedTemporaryFile(delete=False, suffix=".tif") as tmp_file:
        tmp_file.write(uploaded_file.read())
        raster_path = tmp_file.name

# --- 2. User inputs ---
lat = st.number_input("Latitude (N)", value=0.0, format="%.6f")
lon = st.number_input("Longitude (E)", value=0.0, format="%.6f")
width_m = st.number_input("Plot width (m)", value=10.0)
height_m = st.number_input("Plot height (m)", value=12.0)

# --- 3. Load model ---
try:
    model = joblib.load("svr_agb_model.pkl")
except Exception as e:
    st.error(f"Cannot load model svr_agb_model.pkl: {e}")
    model = None

# --- 4. Compute bands/indices and predict ---
if uploaded_file and model and st.button("Predict AGB"):
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ bands ‡πÅ‡∏•‡∏∞ indices
        bands_dict, indices_dict = compute_bands_and_indices(raster_path, lat, lon, width_m, height_m)

        # --- ‡πÅ‡∏™‡∏î‡∏á Bands ---
        st.subheader("üìä Bands (automatic)")
        bands_df = pd.DataFrame(list(bands_dict.items()), columns=["Band", "Mean Value"])
        bands_df = bands_df.rename(columns={"Band":"Band", "Mean Value":"Value"})
        bands_df = bands_df.melt(var_name="Band", value_name="Mean Value")
        st.table(bands_df)

        # --- ‡πÅ‡∏™‡∏î‡∏á Indices ---
        st.subheader("üìà Vegetation Indices")
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡πÅ‡∏•‡∏∞ key uppercase
        indices_dict = {k.upper(): float(v) for k, v in indices_dict.items()}
        indices_df = pd.DataFrame(list(indices_dict.items()), columns=["Index", "Value"])
        indices_df = indices_df.melt(var_name="Index", value_name="Value")
        st.table(indices_df)

        # --- Predict AGB ---
        feature_order = ["NDVI", "TNDVI", "SR", "SAVI", "MSAVI2"]
        X = [indices_dict[f] for f in feature_order]
        agb_pred = model.predict([X])[0]

        st.subheader("üå± Predicted AGB (ton/ha)")
        st.markdown(f"<h1 style='color:green;'>{agb_pred:.3f}</h1>", unsafe_allow_html=True)

    except Exception as e:
        st.error(f"Error computing bands/indices or predicting AGB: {e}")
