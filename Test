from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from shapely.geometry import shape, mapping
import planetary_computer as pc
from pystac_client import Client
import rasterio
import numpy as np
import tempfile
import requests
import datetime

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

class CropRequest(BaseModel):
    polygon: dict  # GeoJSON Polygon
    date: str      # YYYY-MM-DD

@app.post("/get_bands")
def get_bands(req: CropRequest):
    try:
        # connect STAC API
        stac_api = Client.open("https://planetarycomputer.microsoft.com/api/stac/v1")

        # geometry
        geom = shape(req.polygon)
        minx, miny, maxx, maxy = geom.bounds

        dt_str = req.date

        # search Sentinel-2 L2A items
        search = stac_api.search(
            collections=["sentinel-2-l2a"],
            bbox=[minx, miny, maxx, maxy],
            datetime=f"{dt_str}T00:00:00Z/{dt_str}T23:59:59Z",
            max_items=1
        )
        items = list(search.get_items())
        if not items:
            return {"error": "No image found for this date"}
        item = items[0]

        # bands to extract: B02=B, B03=G, B04=R, B08=NIR
        bands = {"B02":"B", "B03":"G", "B04":"R", "B08":"NIR"}
        data = {}

        for b_key, b_name in bands.items():
            asset = item.assets[b_key]
            url = pc.sign(asset.href)

            # download temporary
            tmp_file = tempfile.NamedTemporaryFile()
            r = requests.get(url)
            tmp_file.write(r.content)
            tmp_file.flush()

            with rasterio.open(tmp_file.name) as src:
                out_image, out_transform = rasterio.mask.mask(src, [mapping(geom)], crop=True)
                data[b_name] = out_image[0].tolist()

        return {"bands": data, "id": item.id}

    except Exception as e:
        return {"error": str(e)}
