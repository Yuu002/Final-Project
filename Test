from flask import Flask, render_template, request, jsonify
import ee

# Initialize Earth Engine
ee.Initialize(project='map-web-473508')

app = Flask(__name__)

# -----------------------------
# Cloud Mask Function (Sentinel-2 SR → Reflectance 0–10000)
# -----------------------------
def mask_s2_clouds_reflectance(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0) \
           .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    return image.updateMask(mask)  # ✅ คงค่า reflectance 0–10000

# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')

# -----------------------------
# Endpoint ดึงแผนที่ Sentinel-2
# -----------------------------
@app.route('/get_map', methods=['POST'])
def get_map():
    start = request.json['start']
    end = request.json['end']
    mode = request.json.get('mode', 'sentinel')  # default = sentinel

    collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate(start, end)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(mask_s2_clouds_reflectance))

    image = collection.mean()

    if mode == 'theos':
        # แสดงผลแบบ THEOS (0–1023 look)
        vis_params = {
            'bands': ['B4', 'B3', 'B2'],
            'min': 0,
            'max': 1023,
            'gamma': 1.0
        }
    else:
        # แสดงผล Sentinel ปกติ (reflectance scale)
        vis_params = {
            'bands': ['B4', 'B3', 'B2'],
            'min': 0,
            'max': 3000,
            'gamma': 1.0
        }

    map_id_dict = ee.Image(image).getMapId(vis_params)
    tile_url = map_id_dict['tile_fetcher'].url_format

    return jsonify({'tile_url': tile_url, 'mode': mode})

# -----------------------------
# Endpoint ดึงค่า pixel (Always Reflectance 0–10000)
# -----------------------------
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])
    start = request.json['start']
    end = request.json['end']

    point = ee.Geometry.Point([lon, lat])

    collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate(start, end)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(mask_s2_clouds_reflectance))

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.first(),
        geometry=point,
        scale=10
    )

    return jsonify(bands.getInfo())

# -----------------------------
if __name__ == '__main__':
    app.run(debug=True)

--


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sentinel-2 Viewer</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <style>
    body { margin:0; padding:0; }
    #map { height:100vh; width:75%; float:left; }
    #sidebar {
      width:25%; height:100vh; float:right; padding:15px; box-sizing:border-box;
      background:#f7f7f7; overflow-y:auto; font-family:sans-serif;
    }
    h3 { margin-top:0; }
    label { display:block; margin-top:10px; font-weight:bold; }
    input, button { width:90%; margin-top:5px; padding:5px; font-size:14px; }
    hr { margin:15px 0; }
    #pixelData p { margin:5px 0; }
  </style>
</head>
<body>
  <div id="map"></div>
  <div id="sidebar">
    <h3>Sentinel-2 Control</h3>
    <label>Start Date:</label>
    <input type="date" id="start" value="2020-01-01">
    <label>End Date:</label>
    <input type="date" id="end" value="2020-01-15">
    <button id="loadMap">Load Map</button>

    <hr>

    <h4>Pixel Info</h4>
    <label>Latitude:</label>
    <input type="number" id="lat" step="0.0001">
    <label>Longitude:</label>
    <input type="number" id="lon" step="0.0001">
    <button id="getPixel">Get Pixel</button>

    <div id="pixelData" style="margin-top:10px;">
  <p><strong>Selected Point:</strong></p>
  <p id="coord">Lat: -, Lon: -</p>
  <p id="red">Red (B4): -</p>
  <p id="green">Green (B3): -</p>
  <p id="blue">Blue (B2): -</p>
  <p id="nir">NIR (B8): -</p>
</div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    // --- Base maps ---
    var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    });

    var maptilerHybrid = L.tileLayer('https://api.maptiler.com/maps/hybrid/{z}/{x}/{y}.png?key=SorpWvu9Cx7zkYKrxJbN', {
      attribution: '&copy; MapTiler',
      tileSize: 512,
      zoomOffset: -1
    });

    var map = L.map('map', {
      center: [19.2, 100.1],
      zoom: 10,
      layers: [osm]
    });

    var baseMaps = {
      "OpenStreetMap": osm,
      "MapTiler Hybrid": maptilerHybrid
    };

    // --- Overlay layers (เริ่มต้นว่าง) ---
    var overlayMaps = {};

    // --- Add layer control ---
    var layerControl = L.control.layers(baseMaps, overlayMaps, {collapsed: false}).addTo(map);

    var s2layer; // Sentinel-2 overlay
    var marker;  // เก็บ marker ล่าสุด

    // --- Load Map Button ---
    document.getElementById('loadMap').onclick = async function() {
      let start = document.getElementById('start').value;
      let end = document.getElementById('end').value;

      let resp = await fetch('/get_map', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({start, end})
      });
      let data = await resp.json();

      if(s2layer) {
        map.removeLayer(s2layer);
        layerControl.removeLayer(s2layer); // เอาออกจาก control เดิม
      }

      s2layer = L.tileLayer(data.tile_url);
      s2layer.addTo(map);
      s2layer.bringToFront();

      // เพิ่ม Sentinel-2 เข้าไปใน overlay control
      layerControl.addOverlay(s2layer, "Sentinel-2");
    };
    // --- Function: แสดง marker ---
    function showMarker(lat, lon) {
      if(marker) {
        map.removeLayer(marker);
      }
      marker = L.marker([lat, lon]).addTo(map);
      marker.bindPopup(`Lat: ${lat.toFixed(6)}, Lon: ${lon.toFixed(6)}`).openPopup();
    }

    // --- Get Pixel Button ---
    async function getPixelData(lat, lon, start, end) {
  let resp = await fetch('/get_pixel', {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({lat, lon, start, end})
  });
  let pixel = await resp.json();

  function formatVal(val) {
    return (val !== null && val !== undefined) ? Number(val).toFixed(5) : '-';
  }

  document.getElementById('coord').innerText = `Lat: ${lat}, Lon: ${lon}`;
  document.getElementById('red').innerText   = `Red (B4): ${formatVal(pixel['B4'])}`;
  document.getElementById('green').innerText = `Green (B3): ${formatVal(pixel['B3'])}`;
  document.getElementById('blue').innerText  = `Blue (B2): ${formatVal(pixel['B2'])}`;
  document.getElementById('nir').innerText   = `NIR (B8): ${formatVal(pixel['B8'])}`;
}

    document.getElementById('getPixel').onclick = async function() {
      let lat = parseFloat(document.getElementById('lat').value);
      let lon = parseFloat(document.getElementById('lon').value);
      let start = document.getElementById('start').value;
      let end = document.getElementById('end').value;

      if(isNaN(lat) || isNaN(lon)) {
        alert("Please enter valid coordinates!");
        return;
      }

      // เด้งไปพิกัดที่กรอก
      map.setView([lat, lon], 14);
      showMarker(lat, lon);

      await getPixelData(lat, lon, start, end);
    };

    // --- Click on Map to get Pixel ---
    map.on('click', async function(e){
      let lat = e.latlng.lat;
      let lon = e.latlng.lng;

      document.getElementById('lat').value = lat.toFixed(6);
      document.getElementById('lon').value = lon.toFixed(6);

      showMarker(lat, lon);

      let start = document.getElementById('start').value;
      let end = document.getElementById('end').value;
      await getPixelData(lat, lon, start, end);
    });

    // --- Enter key event: trigger Get Pixel ---
    document.getElementById('lat').addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        document.getElementById('getPixel').click();
      }
    });
    document.getElementById('lon').addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        document.getElementById('getPixel').click();
      }
    });
</script>
</body>
</html>
