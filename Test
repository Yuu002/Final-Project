import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
import joblib

# Load dataset
data = pd.read_csv("bands_extracted.csv")
X = data[["Band1", "Band2", "Band3", "Band4"]].values
y = data[["Blue (B1)", "Green (B2)", "Red (B3)", "NIR (B4)"]].values

# Scale features and outputs
scaler_X = StandardScaler()
X_scaled = scaler_X.fit_transform(X)

scaler_y = StandardScaler()
y_scaled = scaler_y.fit_transform(y)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)

# Train MLP
mlp = MLPRegressor(hidden_layer_sizes=(64,64,32), max_iter=500, random_state=42)
mlp.fit(X_train, y_train)

# Save model and scalers
joblib.dump(mlp, "mlp_model.pkl")
joblib.dump(scaler_X, "scaler_X.save")
joblib.dump(scaler_y, "scaler_y.save")

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np # Import numpy for sqrt

# X_train, X_test, y_train, y_test = prepare_data("AGB_Data.xlsx")

model = SVR(kernel='rbf', C=100, gamma=0.1, epsilon=0.1)
model.fit(X_train, y_train)
y_pred_svr = model.predict(X_test)

# Fix: Calculate RMSE by taking the square root of MSE instead of using squared=False
mse = mean_squared_error(y_test, y_pred_svr)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred_svr)

print(f"SVM (RBF Kernel) -> RÂ²: {r2:.4f}, RMSE: {rmse:.4f}")

import joblib
joblib.dump(model, "svr_agb_model.pkl")
loaded_model = joblib.load("svr_agb_model.pkl")
y_pred_loaded = loaded_model.predict(X_test)
