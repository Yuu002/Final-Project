// Sentinel-2 SR true surface reflectance (0–1)
// Click anywhere on the map to view reflectance values

var start = '2019-06-01';
var end = '2019-07-31';

// Load Sentinel-2 SR Harmonized
var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterDate(start, end)
  .filterBounds(Map.getCenter())
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .sort('CLOUDY_PIXEL_PERCENTAGE');

var image = ee.Image(s2.first());
if (!image) {
  print('No image found for given filters.');
} else {
  Map.addLayer(image, {bands: ['B4','B3','B2'], min: 0, max: 3000}, 'True color');
  Map.centerObject(image, 10);
}

var panel = ui.Panel({style: {position: 'bottom-right', padding: '8px'}});
panel.add(ui.Label('Click map → Reflectance (0–1)'));
var label = ui.Label('');
panel.add(label);
Map.add(panel);

Map.onClick(function(coords) {
  if (!image) return;
  var pt = ee.Geometry.Point([coords.lon, coords.lat]);
  var bands = ['B2','B3','B4','B8']; // Blue, Green, Red, NIR

  var res = image.select(bands).reduceRegion({
    reducer: ee.Reducer.first(),
    geometry: pt,
    scale: 10,
    maxPixels: 1e13
  });

  res.evaluate(function(v) {
    if (!v) { label.setValue('No data here'); return; }

    var lines = ['Location: ' + coords.lat.toFixed(6) + ', ' + coords.lon.toFixed(6)];
    bands.forEach(function(b) {
      var refl = (v[b] || 0) / 10000;   // Convert DN → reflectance
      lines.push(b + ' = ' + refl.toFixed(4));
    });

    // NDVI (0–1)
    var nir = (v['B8'] || 0) / 10000;
    var red = (v['B4'] || 0) / 10000;
    var ndvi = (nir + red === 0) ? null : (nir - red) / (nir + red);
    lines.push('NDVI = ' + (ndvi !== null ? ndvi.toFixed(4) : 'no data'));

    label.setValue(lines.join('\n'));
  });
});

---

// Mean surface reflectance (0–1) in drawn polygon area
var start = '2019-06-01';
var end = '2019-07-31';

var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterDate(start, end)
  .filterBounds(Map.getCenter())
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .sort('CLOUDY_PIXEL_PERCENTAGE');

var image = ee.Image(s2.first());
if (!image) {
  print('No image found for given filters.');
} else {
  Map.addLayer(image, {bands: ['B4','B3','B2'], min: 0, max: 3000}, 'True color');
  Map.centerObject(image, 10);
}

// Drawing tools
var draw = Map.drawingTools();
draw.setShown(true);
draw.layers().forEach(function(l){ draw.layers().remove(l); });
draw.setShape('polygon');

// UI
var resultLabel = ui.Label('Results will appear here');
var computeBtn = ui.Button('Compute mean reflectance (0–1)', function() {
  var layers = draw.layers();
  var geoms = [];
  for (var i = 0; i < layers.length(); i++) {
    var geom = layers.get(i).getEeObject();
    if (geom) geoms.push(geom);
  }
  if (geoms.length === 0) {
    ui.alert('Please draw a polygon first.');
    return;
  }

  var region = ee.FeatureCollection(geoms).geometry();
  var bands = ['B2','B3','B4','B8'];

  var meanDN = image.select(bands).reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: region,
    scale: 10,
    maxPixels: 1e13
  });

  meanDN.evaluate(function(v) {
    if (!v) { resultLabel.setValue('No data in region'); return; }

    var lines = ['Mean reflectance (0–1):'];
    bands.forEach(function(b) {
      var refl = (v[b] || 0) / 10000;
      lines.push(b + ' = ' + refl.toFixed(4));
    });

    var nir = (v['B8'] || 0) / 10000;
    var red = (v['B4'] || 0) / 10000;
    var ndvi = (nir + red === 0) ? null : (nir - red) / (nir + red);
    lines.push('NDVI = ' + (ndvi !== null ? ndvi.toFixed(4) : 'no data'));

    resultLabel.setValue(lines.join('\n'));
  });
});

var clearBtn = ui.Button('Clear shapes', function(){
  for (var i = draw.layers().length() - 1; i >= 0; i--)
    draw.layers().remove(draw.layers().get(i));
  resultLabel.setValue('Shapes cleared.');
});

var panel = ui.Panel([
  ui.Label('วาด polygon แล้วกดปุ่มเพื่อหาค่าเฉลี่ย Reflectance (0–1)'),
  computeBtn, clearBtn, resultLabel
]);
panel.style().set({position: 'bottom-right', padding: '8px'});
Map.add(panel);
