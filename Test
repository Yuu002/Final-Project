from flask import Flask, render_template, request, jsonify
import ee
import joblib
import numpy as np
from indices import calculate_indices  # ใช้สูตรที่คุณเขียนไว้ใน indices.py

# -----------------------------
# Init Earth Engine
# -----------------------------
ee.Initialize(project='map-web-473508')

app = Flask(__name__)

# -----------------------------
# โหลดโมเดลและ Scaler
# -----------------------------
mlp_model = joblib.load("mlp_model.pkl")
scaler_X = joblib.load("scaler_X.save")
scaler_y = joblib.load("scaler_y.save")

svr_model = joblib.load("svr_agb_model.pkl")
svr_scaler_X = joblib.load("svr_scaler_X.save")
svr_scaler_y = joblib.load("svr_scaler_y.save")

# -----------------------------
# Cloud Mask Function (Sentinel-2 SR → Reflectance 0–100)
# -----------------------------
def mask_s2_clouds_reflectance(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0).And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    reflectance = image.divide(10000).multiply(100)  # scale 0–100
    return reflectance.updateMask(mask)

# -----------------------------
# Cloud Mask + DN scale (Sentinel-2 → THEOS-style DN 0–100)
# -----------------------------
def mask_s2_clouds_dn(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0).And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    dn_image = image.divide(10000).multiply(100).toUint16()
    return dn_image.updateMask(mask)

# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')

# -----------------------------
# Endpoint: ดึง Sentinel-2 และ THEOS-style map tiles
# -----------------------------
@app.route('/get_map', methods=['POST'])
def get_map():
    start = request.json['start']
    end = request.json['end']

    # Sentinel Reflectance
    collection_ref = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )
    image_ref = collection_ref.mean()

    vis_sentinel = {'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 100, 'gamma': 1.0}
    map_id_sentinel = ee.Image(image_ref).getMapId(vis_sentinel)

    # THEOS-style DN
    collection_dn = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_dn)
    )
    image_dn = collection_dn.mean()

    vis_theos = {'bands': ['B4', 'B3', 'B2'], 'min': 0, 'max': 100, 'gamma': 1.0}
    map_id_theos = ee.Image(image_dn).getMapId(vis_theos)

    return jsonify({
        'sentinel_url': map_id_sentinel['tile_fetcher'].url_format,
        'theos_url': map_id_theos['tile_fetcher'].url_format
    })

# -----------------------------
# Endpoint: ดึงค่า Pixel Reflectance 0–100 + predict models
# -----------------------------
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])
    start = request.json['start']
    end = request.json['end']

    point = ee.Geometry.Point([lon, lat])

    collection = (
        ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
        .filterDate(start, end)
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(mask_s2_clouds_reflectance)
    )

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.first(),
        geometry=point,
        scale=10
    )

    pixel_data = bands.getInfo()

    # -----------------------------
    # Step 1: ดึงค่า Blue, Green, Red, NIR
    # -----------------------------
    try:
        blue = float(pixel_data.get("B2", 0))
        green = float(pixel_data.get("B3", 0))
        red = float(pixel_data.get("B4", 0))
        nir = float(pixel_data.get("B8", 0))
    except:
        return jsonify({"error": "invalid pixel values"})

    # -----------------------------
    # Step 2: MLP → Field Reflectance
    # -----------------------------
    X = np.array([[blue, green, red, nir]])
    X_scaled = scaler_X.transform(X)
    y_pred_scaled = mlp_model.predict(X_scaled)
    field_reflectance = scaler_y.inverse_transform(y_pred_scaled.reshape(1, -1)).ravel()

    field_blue, field_green, field_red, field_nir = field_reflectance

    # -----------------------------
    # Step 3: คำนวณดัชนี 5 ตัว
    # -----------------------------
    indices = calculate_indices(field_blue, field_green, field_red, field_nir)

    # -----------------------------
    # Step 4: SVR → Predict AGB
    # -----------------------------
    idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    idx_scaled = svr_scaler_X.transform(idx_vals)
    agb_scaled = svr_model.predict(idx_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

    # -----------------------------
    # รวมผลลัพธ์
    # -----------------------------
    pixel_data.update({
        "field_reflectance": {
            "Blue": field_blue,
            "Green": field_green,
            "Red": field_red,
            "NIR": field_nir
        },
        "indices": indices,
        "AGB": agb
    })

    return jsonify(pixel_data)

# -----------------------------
if __name__ == '__main__':
    app.run(debug=True)

--

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sentinel-2 Viewer</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <style>
    body { margin:0; padding:0; }
    #map { height:100vh; width:75%; float:left; }
    #sidebar {
      width:25%; height:100vh; float:right; padding:15px; box-sizing:border-box;
      background:#f7f7f7; overflow-y:auto; font-family:sans-serif;
    }
    h3 { margin-top:0; }
    label { display:block; margin-top:10px; font-weight:bold; }
    input, button { width:90%; margin-top:5px; padding:5px; font-size:14px; }
    hr { margin:15px 0; }
    #pixelData p { margin:5px 0; }
  </style>
</head>
<body>
  <div id="map"></div>
  <div id="sidebar">
    <h3>Sentinel-2 Control</h3>
    <label>Start Date:</label>
    <input type="date" id="start" value="2020-01-01">
    <label>End Date:</label>
    <input type="date" id="end" value="2020-01-15">
    <button id="loadMap">Load Map</button>

    <hr>

    <h4>Pixel Info</h4>
    <label>Latitude:</label>
    <input type="number" id="lat" step="0.0001">
    <label>Longitude:</label>
    <input type="number" id="lon" step="0.0001">
    <button id="getPixel">Get Pixel</button>

    <div id="pixelData" style="margin-top:10px;">
      <p><strong>Selected Point:</strong></p>
      <p id="coord">Lat: -, Lon: -</p>
      <hr>
      <p><strong>Sentinel-2 Pixel Reflectance</strong></p>
      <p id="red">Red (B4): -</p>
      <p id="green">Green (B3): -</p>
      <p id="blue">Blue (B2): -</p>
      <p id="nir">NIR (B8): -</p>

      <hr>
      <p><strong>Field Reflectance (ภาคสนาม)</strong></p>
      <p id="fblue">Blue: -</p>
      <p id="fgreen">Green: -</p>
      <p id="fred">Red: -</p>
      <p id="fnir">NIR: -</p>

      <hr>
      <p><strong>Vegetation Indices</strong></p>
      <p id="ndvi">NDVI: -</p>
      <p id="tndvi">TNDVI: -</p>
      <p id="sr">SR: -</p>
      <p id="savi">SAVI: -</p>
      <p id="msavi2">MSAVI2: -</p>

      <hr>
      <p><strong>Estimated AGB</strong></p>
      <p id="agb">AGB: -</p>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    });

    var map = L.map('map', {
      center: [19.2, 100.1],
      zoom: 10,
      layers: [osm]
    });

    var layerControl = L.control.layers({"OpenStreetMap": osm}, {}, {collapsed: false}).addTo(map);
    var s2layer = {};
    var marker;

    document.getElementById('loadMap').onclick = async function() {
      let start = document.getElementById('start').value;
      let end = document.getElementById('end').value;
      let resp = await fetch('/get_map', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({start, end})
      });
      let data = await resp.json();

      if(s2layer.sentinel) {
        map.removeLayer(s2layer.sentinel);
        map.removeLayer(s2layer.theos);
        layerControl.removeLayer(s2layer.sentinel);
        layerControl.removeLayer(s2layer.theos);
      }

      let sentinelLayer = L.tileLayer(data.sentinel_url);
      let theosLayer = L.tileLayer(data.theos_url);
      sentinelLayer.addTo(map);
      s2layer = { sentinel: sentinelLayer, theos: theosLayer };
      layerControl.addOverlay(sentinelLayer, "Sentinel-2 Natural");
      layerControl.addOverlay(theosLayer, "THEOS-style");
    };

    function showMarker(lat, lon) {
      if(marker) map.removeLayer(marker);
      marker = L.marker([lat, lon]).addTo(map);
      marker.bindPopup(`Lat: ${lat.toFixed(6)}, Lon: ${lon.toFixed(6)}`).openPopup();
    }

    async function getPixelData(lat, lon, start, end) {
      let resp = await fetch('/get_pixel', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify({lat, lon, start, end})
      });
      let pixel = await resp.json();

      function formatVal(val) {
        return (val !== null && val !== undefined) ? Number(val).toFixed(5) : '-';
      }

      document.getElementById('coord').innerText = `Lat: ${lat}, Lon: ${lon}`;
      document.getElementById('red').innerText   = `Red (B4): ${formatVal(pixel['B4'])}`;
      document.getElementById('green').innerText = `Green (B3): ${formatVal(pixel['B3'])}`;
      document.getElementById('blue').innerText  = `Blue (B2): ${formatVal(pixel['B2'])}`;
      document.getElementById('nir').innerText   = `NIR (B8): ${formatVal(pixel['B8'])}`;

      if(pixel.field_reflectance){
        document.getElementById('fblue').innerText  = `Blue: ${formatVal(pixel.field_reflectance.Blue)}`;
        document.getElementById('fgreen').innerText = `Green: ${formatVal(pixel.field_reflectance.Green)}`;
        document.getElementById('fred').innerText   = `Red: ${formatVal(pixel.field_reflectance.Red)}`;
        document.getElementById('fnir').innerText   = `NIR: ${formatVal(pixel.field_reflectance.NIR)}`;
      }

      if(pixel.indices){
        document.getElementById('ndvi').innerText  = `NDVI: ${formatVal(pixel.indices.NDVI)}`;
        document.getElementById('tndvi').innerText = `TNDVI: ${formatVal(pixel.indices.TNDVI)}`;
        document.getElementById('sr').innerText    = `SR: ${formatVal(pixel.indices.SR)}`;
        document.getElementById('savi').innerText  = `SAVI: ${formatVal(pixel.indices.SAVI)}`;
        document.getElementById('msavi2').innerText= `MSAVI2: ${formatVal(pixel.indices.MSAVI2)}`;
      }

      document.getElementById('agb').innerText = `AGB: ${formatVal(pixel.AGB)}`;
    }

    document.getElementById('getPixel').onclick = async function() {
      let lat = parseFloat(document.getElementById('lat').value);
      let lon = parseFloat(document.getElementById('lon').value);
      let start = document.getElementById('start').value;
      let end = document.getElementById('end').value;
      if(isNaN(lat) || isNaN(lon)) { alert("Please enter valid coordinates!"); return; }
      map.setView([lat, lon], 14);
      showMarker(lat, lon);
      await getPixelData(lat, lon, start, end);
    };

    map.on('click', async function(e){
      let lat = e.latlng.lat;
      let lon = e.latlng.lng;
      document.getElementById('lat').value = lat.toFixed(6);
      document.getElementById('lon').value = lon.toFixed(6);
      showMarker(lat, lon);
      let start = document.getElementById('start').value;
      let end = document.getElementById('end').value;
      await getPixelData(lat, lon, start, end);
    });
  </script>
</body>
</html>
