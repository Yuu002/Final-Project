@app.route('/get_area', methods=['POST'])
def get_area():
    try:
        import random
        data = request.get_json()
        area = data['area']
        start = data['start']
        end = data['end']

        # -----------------------------
        # กำหนดพื้นที่ผู้ใช้วาด (Rectangle)
        # -----------------------------
        region = ee.Geometry.Rectangle([
            [area['sw_lon'], area['sw_lat']],
            [area['ne_lon'], area['ne_lat']]
        ])

        # -----------------------------
        # ดึงภาพ Sentinel-2 SR
        # -----------------------------
        collection = (
            ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
            .filterDate(start, end)
            .filterBounds(region)
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
            .select(['B2', 'B3', 'B4', 'B8'])  # Blue, Green, Red, NIR
        )

        image = collection.median()

        # -----------------------------
        # สุ่มจุดภายในพื้นที่ เพื่อเอาค่า pixel มาหาค่าเฉลี่ยเอง
        # -----------------------------
        sample_points = image.sample(
            region=region,
            scale=10,          # Sentinel-2 pixel = 10 m
            numPixels=500,     # สุ่มตัวอย่าง 500 จุด (ปรับได้)
            seed=1234,
            geometries=True
        ).getInfo()

        if not sample_points['features']:
            return jsonify({'error': 'No pixels found in this area.'})

        # -----------------------------
        # เอาค่าพิกเซลทั้งหมดมาหาค่าเฉลี่ย
        # -----------------------------
        vals = {'B2': [], 'B3': [], 'B4': [], 'B8': []}
        for f in sample_points['features']:
            prop = f['properties']
            for b in vals:
                if b in prop and prop[b] is not None:
                    vals[b].append(prop[b])

        reflectance = {
            'Blue': sum(vals['B2']) / len(vals['B2']) / 10000 if vals['B2'] else 0,
            'Green': sum(vals['B3']) / len(vals['B3']) / 10000 if vals['B3'] else 0,
            'Red': sum(vals['B4']) / len(vals['B4']) / 10000 if vals['B4'] else 0,
            'NIR': sum(vals['B8']) / len(vals['B8']) / 10000 if vals['B8'] else 0
        }

        # -----------------------------
        # คำนวณค่าดัชนี (NDVI, SAVI, ฯลฯ)
        # -----------------------------
        from indices import calculate_indices
        indices = calculate_indices(reflectance)

        # -----------------------------
        # โหลดโมเดลทำนาย AGB
        # -----------------------------
        model = joblib.load('svr_agb_model.pkl')
        scaler_X = joblib.load('svr_scaler_X.save')
        scaler_y = joblib.load('svr_scaler_y.save')

        X = np.array([[reflectance['Blue'], reflectance['Green'], reflectance['Red'], reflectance['NIR'],
                       indices['NDVI'], indices['SAVI'], indices['MSAVI2'], indices['TNDVI'], indices['SR']]])
        X_scaled = scaler_X.transform(X)
        y_pred_scaled = model.predict(X_scaled)
        agb_pred = scaler_y.inverse_transform(y_pred_scaled.reshape(-1, 1))[0][0]

        # -----------------------------
        # ส่งค่ากลับไปหน้าเว็บ
        # -----------------------------
        return jsonify({
            'reflectance': reflectance,
            'indices': indices,
            'AGB': float(agb_pred)
        })

    except Exception as e:
        return jsonify({'error': str(e)})
