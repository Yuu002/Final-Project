import pandas as pd
import pickle
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler

# -------------------------------------------------
# 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
# -------------------------------------------------
# dataset.csv ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: Blue, Green, Red, NIR (‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ band ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á)
# ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå target ‡πÄ‡∏ä‡πà‡∏ô "Field_Reflectance" (‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡πÅ‡∏™‡∏á‡∏†‡∏≤‡∏Ñ‡∏™‡∏ô‡∏≤‡∏°)
# -------------------------------------------------

df = pd.read_csv("dataset.csv")

# Features ‡πÅ‡∏•‡∏∞ Target
X = df[["Blue", "Green", "Red", "NIR"]].values   # üëà ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏° dataset ‡∏à‡∏£‡∏¥‡∏á
y = df["Field_Reflectance"].values               # üëà ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏° dataset ‡∏à‡∏£‡∏¥‡∏á

# -------------------------------------------------
# 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Scaler
# -------------------------------------------------
scaler_X = StandardScaler()
scaler_y = StandardScaler()

X_scaled = scaler_X.fit_transform(X)
y_scaled = scaler_y.fit_transform(y.reshape(-1, 1))

# -------------------------------------------------
# 3. ‡πÄ‡∏ó‡∏£‡∏ô MLP
# -------------------------------------------------
mlp_model = MLPRegressor(hidden_layer_sizes=(64,64,32),
                         activation='relu',
                         solver='adam',
                         max_iter=500,
                         random_state=42)

mlp_model.fit(X_scaled, y_scaled.ravel())

# -------------------------------------------------
# 4. ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Scaler
# -------------------------------------------------
with open("models/mlp_model.pkl", "wb") as f:
    pickle.dump(mlp_model, f)

with open("models/scaler_X.save", "wb") as f:
    pickle.dump(scaler_X, f)

with open("models/scaler_y.save", "wb") as f:
    pickle.dump(scaler_y, f)

print("‚úÖ MLP model and scalers saved to 'models/'")
