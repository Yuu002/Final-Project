# app.py
import streamlit as st
import pandas as pd
import joblib
import tempfile
import rasterio
import numpy as np
from bands_indices import compute_bands_and_indices

st.set_page_config(page_title="AGB Predictor", layout="wide")
st.title("🌿 AGB Prediction from Satellite Image")

# --- Create two main columns: left for image, right for inputs/results ---
col_img, col_input = st.columns([1,1.2])

# --- Upload raster ---
with col_input:
    st.subheader("📁 Upload Raster Image")
    uploaded_file = st.file_uploader("Upload Satellite Image (TIFF)", type=["tif","tiff"])
    raster_path = None
    if uploaded_file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".tif") as tmp_file:
            tmp_file.write(uploaded_file.read())
            raster_path = tmp_file.name

# --- User inputs arranged in two rows/two columns ---
with col_input:
    st.subheader("📍 Plot Parameters")
    col_lat, col_width = st.columns(2)
    lat_str = col_lat.text_input("Latitude (N)", value="0.0")
    width_m = col_width.number_input("Plot width (m)", value=10.0)

    col_lon, col_height = st.columns(2)
    lon_str = col_lon.text_input("Longitude (E)", value="0.0")
    height_m = col_height.number_input("Plot height (m)", value=12.0)

# --- Convert inputs to float ---
try:
    lat = float(lat_str)
except:
    lat = 0.0
try:
    lon = float(lon_str)
except:
    lon = 0.0

# --- Load model ---
try:
    model = joblib.load("svr_agb_model.pkl")
except:
    with col_input:
        st.error("Cannot load model svr_agb_model.pkl")
    model = None

# --- Show image preview on the left ---
with col_img:
    st.subheader("🖼 Uploaded Image Preview")
    if uploaded_file is not None:
        try:
            with rasterio.open(raster_path) as src:
                bands_to_show = min(3, src.count)
                img_array = src.read(list(range(1, bands_to_show+1)))
                img_array = np.transpose(img_array, (1,2,0))
                if img_array.dtype != np.uint8:
                    img_array = ((img_array - np.nanmin(img_array)) / np.nanmax(img_array - np.nanmin(img_array)) * 255).astype(np.uint8)
                st.image(img_array, use_column_width=True)
        except Exception as e:
            st.error(f"Cannot display image: {e}")
    else:
        st.info("No image uploaded yet.")

# --- Predict button and output ---
with col_input:
    if st.button("Predict AGB"):
        if raster_path is None:
            st.error("Please upload a raster image first")
        elif model is None:
            st.error("Model not loaded")
        else:
            try:
                # Compute bands and indices
                bands_dict, indices_dict = compute_bands_and_indices(raster_path, lat, lon, width_m, height_m)

                # Bands table (vertical)
                st.subheader("📊 Bands (automatic)")
                bands_df = pd.DataFrame(list(bands_dict.items()), columns=["Band", "Mean Value"])
                st.table(bands_df)

                # Indices table (vertical)
                st.subheader("📈 Vegetation Indices")
                indices_df = pd.DataFrame(list(indices_dict.items()), columns=["Index", "Value"])
                st.table(indices_df)

                # Predict AGB
                feature_order = ["NDVI","TNDVI","SR","SAVI","MSAVI2"]
                X = [indices_dict[f] for f in feature_order]
                agb_pred = model.predict([X])[0]

                st.subheader("🌱 Predicted AGB (ton/ha)")
                st.markdown(f"<h2 style='color:green;font-size:30px;'>{agb_pred:.3f}</h2>", unsafe_allow_html=True)

            except Exception as e:
                st.error(f"Error computing bands/indices: {e}")
