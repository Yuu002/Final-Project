// Sample 1 pixel on Sentinel-2 SR (Reflectance in percent, 0–100%)

var start = '2019-06-01';
var end = '2019-07-31';

// Load Sentinel-2 SR Harmonized
var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterDate(start, end)
  .filterBounds(Map.getCenter())
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .sort('CLOUDY_PIXEL_PERCENTAGE');

var image = ee.Image(s2.first());
if (!image) {
  print('No image found for given filters.');
} else {
  Map.addLayer(image, {bands: ['B4','B3','B2'], min: 0, max: 3000}, 'True color');
  Map.centerObject(image, 10);
}

// UI
var resultPanel = ui.Panel({style: {position: 'bottom-right', padding: '8px'}});
resultPanel.add(ui.Label('Click on map → reflectance (%)'));
var outputLabel = ui.Label('');
resultPanel.add(outputLabel);
Map.add(resultPanel);

Map.onClick(function(coords) {
  if (!image) return;
  var pt = ee.Geometry.Point([coords.lon, coords.lat]);
  var bands = ['B2','B3','B4','B8']; // Blue, Green, Red, NIR

  // Get DN
  var result = image.select(bands).reduceRegion({
    reducer: ee.Reducer.first(),
    geometry: pt,
    scale: 10,
    maxPixels: 1e13
  });

  result.evaluate(function(res) {
    if (!res) {
      outputLabel.setValue('No data here');
      return;
    }

    var lines = ['Location: ' + coords.lat.toFixed(6) + ', ' + coords.lon.toFixed(6)];
    bands.forEach(function(b) {
      var dn = res[b];
      if (dn !== null && dn !== undefined) {
        var reflPct = dn / 100; // DN → reflectance (%)
        lines.push(b + ' = ' + reflPct.toFixed(2) + ' %');
      }
    });

    // NDVI (%)
    var nir = res['B8'] / 10000;
    var red = res['B4'] / 10000;
    var ndvi = (nir - red) / (nir + red);
    lines.push('NDVI = ' + (ndvi * 100).toFixed(2) + ' %');

    outputLabel.setValue(lines.join('\n'));
  });
});
---

// Compute mean reflectance (percent) in drawn polygon areas
var start = '2019-06-01';
var end = '2019-07-31';

var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterDate(start, end)
  .filterBounds(Map.getCenter())
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .sort('CLOUDY_PIXEL_PERCENTAGE');

var image = ee.Image(s2.first());
if (!image) {
  print('No image found for given filters.');
} else {
  Map.addLayer(image, {bands: ['B4','B3','B2'], min: 0, max: 3000}, 'True color');
  Map.centerObject(image, 10);
}

// Drawing tools
var draw = Map.drawingTools();
draw.setShown(true);
draw.layers().forEach(function(l){ draw.layers().remove(l); });
draw.setShape('polygon');

// UI
var resultLabel = ui.Label('Results will appear here');
var computeBtn = ui.Button('Compute mean reflectance (%)', function() {
  var layers = draw.layers();
  var geoms = [];
  for (var i = 0; i < layers.length(); i++) {
    var geom = layers.get(i).getEeObject();
    if (geom) geoms.push(geom);
  }
  if (geoms.length === 0) {
    ui.alert('Please draw a polygon first.');
    return;
  }

  var region = ee.FeatureCollection(geoms).geometry();
  var bands = ['B2','B3','B4','B8'];
  var result = image.select(bands).reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: region,
    scale: 10,
    maxPixels: 1e13
  });

  result.evaluate(function(res) {
    if (!res) {
      resultLabel.setValue('No data in drawn area');
      return;
    }

    var lines = ['Mean reflectance (%)'];
    bands.forEach(function(b) {
      var dn = res[b];
      if (dn !== null && dn !== undefined) {
        lines.push(b + ' = ' + (dn / 100).toFixed(2) + ' %');
      }
    });

    var nir = res['B8'] / 10000;
    var red = res['B4'] / 10000;
    var ndvi = (nir - red) / (nir + red);
    lines.push('NDVI = ' + (ndvi * 100).toFixed(2) + ' %');

    resultLabel.setValue(lines.join('\n'));
  });
});

var clearBtn = ui.Button('Clear shapes', function(){
  for (var i = draw.layers().length() - 1; i >= 0; i--)
    draw.layers().remove(draw.layers().get(i));
  resultLabel.setValue('Shapes cleared.');
});

var panel = ui.Panel([
  ui.Label('วาด polygon แล้วกดปุ่มเพื่อหาค่าเฉลี่ย Reflectance (%)'),
  computeBtn, clearBtn, resultLabel
]);
panel.style().set({position: 'bottom-right', padding: '8px'});
Map.add(panel);
