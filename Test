<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sentinel-2 Viewer</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css"/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: #0f172a; color: #e2e8f0; overflow: hidden;
    }
    #map { height: 100vh; width: calc(100% - 420px); float: left; position: relative; }
    #sidebar {
      width: 420px; height: 100vh; float: right;
      background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
      overflow-y: auto; box-shadow: -4px 0 24px rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
    }
    #sidebar::-webkit-scrollbar { width: 8px; }
    #sidebar::-webkit-scrollbar-thumb { background: rgba(96,165,250,0.3); border-radius: 4px; }
    .header { padding: 32px 28px; background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); }
    .header h1 { font-size: 28px; font-weight: 700; color: white; margin-bottom: 6px; }
    .section { padding: 24px 28px; border-bottom: 1px solid rgba(255,255,255,0.06); }
    .section-title { font-size: 16px; font-weight: 600; color: #60a5fa; margin-bottom: 18px; }
    input[type="date"], input[type="number"] {
      width: 100%; padding: 12px 16px; margin-bottom: 16px;
      background: rgba(255,255,255,0.05); border: 1px solid rgba(255,255,255,0.1);
      border-radius: 10px; color: #e2e8f0; font-size: 14px;
    }
    button {
      width: 100%; padding: 14px 24px;
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      border: none; border-radius: 10px; color: white;
      font-size: 15px; font-weight: 600; cursor: pointer;
      transition: all 0.3s ease; box-shadow: 0 4px 12px rgba(59,130,246,0.3);
    }
    button:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(59,130,246,0.4); }
    .mode-selector { display: flex; gap: 12px; margin-bottom: 16px; }
    .mode-btn {
      flex: 1; padding: 12px 16px;
      background: rgba(255,255,255,0.05); border: 2px solid rgba(255,255,255,0.1);
      border-radius: 8px; color: #94a3b8; font-size: 13px; font-weight: 600;
      cursor: pointer; transition: all 0.3s ease; text-transform: uppercase;
    }
    .mode-btn.active {
      background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      border-color: #3b82f6; color: white; box-shadow: 0 4px 12px rgba(59,130,246,0.3);
    }
    .mode-content { display: none; }
    .mode-content.active { display: block; }
    .coord-display { background: rgba(59,130,246,0.1); border: 1px solid rgba(59,130,246,0.2); border-radius: 10px; padding: 14px 16px; display: flex; justify-content: space-between; }
    .coord-label { font-size: 11px; color: #94a3b8; margin-bottom: 4px; }
    .coord-val { font-size: 15px; color: #60a5fa; font-weight: 600; }
    .data-grid { display: grid; gap: 12px; }
    .data-card { background: rgba(255,255,255,0.03); border: 1px solid rgba(255,255,255,0.08); border-radius: 10px; padding: 14px 16px; }
    .data-label { font-size: 12px; color: #94a3b8; margin-bottom: 6px; }
    .data-value { font-size: 18px; color: #e2e8f0; font-weight: 600; }
    .data-value.highlight { color: #60a5fa; }
    .info-text { font-size: 12px; color: #64748b; margin-top: 12px; padding: 12px; background: rgba(59,130,246,0.05); border-left: 3px solid #60a5fa; border-radius: 4px; }
  </style>
</head>

<body>
  <div id="map"></div>
  <div id="sidebar">
    <div class="header">
      <h1>üõ∞Ô∏è Sentinel-2 Viewer</h1>
      <p>Earth Observation & Analysis Platform</p>
    </div>

    <div class="section">
      <div class="section-title">Date Range</div>
      <label>Start Date</label>
      <input type="date" id="start" value="2020-01-01">
      <label>End Date</label>
      <input type="date" id="end" value="2020-01-15">
      <button id="loadMap">üîç Load Satellite Imagery</button>
    </div>

    <div class="section">
      <div class="section-title">Analysis Mode</div>
      <div class="mode-selector">
        <button class="mode-btn active" data-mode="point">üìç Point</button>
        <button class="mode-btn" data-mode="area">üó∫Ô∏è Area</button>
      </div>

      <!-- Point Mode -->
      <div class="mode-content active" id="point-mode">
        <label>Latitude</label>
        <input type="number" id="lat" step="0.0001" placeholder="e.g., 19.2000">
        <label>Longitude</label>
        <input type="number" id="lon" step="0.0001" placeholder="e.g., 100.1000">
        <button id="getPixel">üìç Analyze Point</button>
        <div class="info-text">üí° Click on the map or enter coordinates to analyze a single point.</div>
      </div>

      <!-- Area Mode -->
      <div class="mode-content" id="area-mode">
        <button id="drawArea">üó∫Ô∏è Draw Area on Map</button>
        <div class="info-text">üí° Click ‚ÄúDraw Area‚Äù, then drag on the map to select a region for analysis. You can edit or delete it later.</div>
      </div>
    </div>

    <div class="section">
      <div class="section-title">Selected Location</div>
      <div class="coord-display">
        <div>
          <div class="coord-label">Latitude</div>
          <div class="coord-val" id="coordLat">-</div>
        </div>
        <div>
          <div class="coord-label">Longitude</div>
          <div class="coord-val" id="coordLon">-</div>
        </div>
      </div>
    </div>

    <div class="section">
      <div class="section-title">Sentinel-2 Reflectance</div>
      <div class="data-grid">
        <div class="data-card"><div class="data-label">üî¥ Red (B4)</div><div class="data-value" id="red">-</div></div>
        <div class="data-card"><div class="data-label">üü¢ Green (B3)</div><div class="data-value" id="green">-</div></div>
        <div class="data-card"><div class="data-label">üîµ Blue (B2)</div><div class="data-value" id="blue">-</div></div>
        <div class="data-card"><div class="data-label">‚ö´ NIR (B8)</div><div class="data-value" id="nir">-</div></div>
      </div>
    </div>

    <div class="section">
      <div class="section-title">Vegetation Indices</div>
      <div class="data-grid">
        <div class="data-card"><div class="data-label">NDVI</div><div class="data-value highlight" id="ndvi">-</div></div>
        <div class="data-card"><div class="data-label">TNDVI</div><div class="data-value highlight" id="tndvi">-</div></div>
        <div class="data-card"><div class="data-label">SR</div><div class="data-value highlight" id="sr">-</div></div>
        <div class="data-card"><div class="data-label">SAVI</div><div class="data-value highlight" id="savi">-</div></div>
        <div class="data-card"><div class="data-label">MSAVI2</div><div class="data-value highlight" id="msavi2">-</div></div>
      </div>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js"></script>

  <script>
    var map = L.map('map').setView([19.2, 100.1], 10);
    var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
    var marker, rectangle;
    var currentMode = 'point';

    // Draw controls
    var drawnItems = new L.FeatureGroup().addTo(map);
    var drawControl = new L.Control.Draw({
      edit: { featureGroup: drawnItems, remove: true },
      draw: {
        marker: false, circle: false, polyline: false, polygon: false,
        rectangle: { shapeOptions: { color: '#60a5fa', weight: 2, fillOpacity: 0.1 } }
      }
    });
    map.addControl(drawControl);

    // Switch mode
    document.querySelectorAll('.mode-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        document.querySelectorAll('.mode-btn').forEach(b => b.classList.remove('active'));
        document.querySelectorAll('.mode-content').forEach(c => c.classList.remove('active'));
        this.classList.add('active');
        currentMode = this.getAttribute('data-mode');
        document.getElementById(currentMode + '-mode').classList.add('active');
        if(marker) map.removeLayer(marker);
        if(rectangle) { drawnItems.clearLayers(); rectangle = null; }
      });
    });

    // Draw area button
    document.getElementById('drawArea').onclick = function() {
      new L.Draw.Rectangle(map, drawControl.options.draw.rectangle).enable();
    };

    // Draw create / edit events
    map.on(L.Draw.Event.CREATED, async function(e) {
      if(currentMode !== 'area') return;
      drawnItems.clearLayers();
      rectangle = e.layer;
      drawnItems.addLayer(rectangle);
      let b = rectangle.getBounds();
      let area = {
        sw_lat: b.getSouthWest().lat,
        sw_lon: b.getSouthWest().lng,
        ne_lat: b.getNorthEast().lat,
        ne_lon: b.getNorthEast().lng
      };
      await getAreaData(area);
    });

    map.on(L.Draw.Event.EDITED, async function(e) {
      if(currentMode !== 'area') return;
      e.layers.eachLayer(async layer => {
        let b = layer.getBounds();
        let area = {
          sw_lat: b.getSouthWest().lat,
          sw_lon: b.getSouthWest().lng,
          ne_lat: b.getNorthEast().lat,
          ne_lon: b.getNorthEast().lng
        };
        await getAreaData(area);
      });
    });

    // Point click
    map.on('click', async function(e) {
      if(currentMode === 'point') {
        let lat = e.latlng.lat, lon = e.latlng.lng;
        document.getElementById('lat').value = lat.toFixed(6);
        document.getElementById('lon').value = lon.toFixed(6);
        if(marker) map.removeLayer(marker);
        marker = L.marker([lat, lon]).addTo(map).bindPopup(`Lat: ${lat.toFixed(6)}, Lon: ${lon.toFixed(6)}`).openPopup();
        await getPixelData(lat, lon);
      }
    });

    // Fake API responses (for demo)
    async function getPixelData(lat, lon) {
      document.getElementById('coordLat').innerText = lat.toFixed(6);
      document.getElementById('coordLon').innerText = lon.toFixed(6);
      document.getElementById('red').innerText = (Math.random()).toFixed(3);
      document.getElementById('green').innerText = (Math.random()).toFixed(3);
      document.getElementById('blue').innerText = (Math.random()).toFixed(3);
      document.getElementById('nir').innerText = (Math.random()).toFixed(3);
      document.getElementById('ndvi').innerText = (Math.random()).toFixed(3);
      document.getElementById('tndvi').innerText = (Math.random()).toFixed(3);
      document.getElementById('sr').innerText = (Math.random()).toFixed(3);
      document.getElementById('savi').innerText = (Math.random()).toFixed(3);
      document.getElementById('msavi2').innerText = (Math.random()).toFixed(3);
    }

    async function getAreaData(area) {
      let lat = (area.sw_lat + area.ne_lat) / 2;
      let lon = (area.sw_lon + area.ne_lon) / 2;
      document.getElementById('coordLat').innerText = lat.toFixed(6);
      document.getElementById('coordLon').innerText = lon.toFixed(6);
      document.getElementById('red').innerText = (Math.random()).toFixed(3);
      document.getElementById('green').innerText = (Math.random()).toFixed(3);
      document.getElementById('blue').innerText = (Math.random()).toFixed(3);
      document.getElementById('nir').innerText = (Math.random()).toFixed(3);
      document.getElementById('ndvi').innerText = (Math.random()).toFixed(3);
      document.getElementById('tndvi').innerText = (Math.random()).toFixed(3);
      document.getElementById('sr').innerText = (Math.random()).toFixed(3);
      document.getElementById('savi').innerText = (Math.random()).toFixed(3);
      document.getElementById('msavi2').innerText = (Math.random()).toFixed(3);
    }
  </script>
</body>
</html>
