<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Satellite Time Machine</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

```
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        height: 100vh;
        overflow: hidden;
    }

    #map {
        width: 100%;
        height: 100vh;
    }

    .controls {
        position: absolute;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
        min-width: 280px;
    }

    .controls h2 {
        font-size: 18px;
        margin-bottom: 15px;
        color: #333;
    }

    .control-group {
        margin-bottom: 15px;
    }

    .control-group label {
        display: block;
        font-size: 13px;
        color: #666;
        margin-bottom: 5px;
        font-weight: 500;
    }

    .control-group input[type="date"] {
        width: 100%;
        padding: 10px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.3s;
    }

    .control-group input[type="date"]:focus {
        outline: none;
        border-color: #4CAF50;
    }

    .btn {
        width: 100%;
        padding: 12px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }

    .btn:active {
        transform: translateY(0);
    }

    .info {
        margin-top: 15px;
        padding: 12px;
        background: #f5f5f5;
        border-radius: 6px;
        font-size: 12px;
        color: #666;
        line-height: 1.5;
    }

    .loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 20px 40px;
        border-radius: 8px;
        z-index: 2000;
        display: none;
    }

    .loading.active {
        display: block;
    }

    .current-date {
        margin-top: 10px;
        padding: 10px;
        background: #e8f5e9;
        border-radius: 6px;
        font-size: 13px;
        color: #2e7d32;
        text-align: center;
        font-weight: 500;
    }

    @media (max-width: 768px) {
        .controls {
            top: 10px;
            right: 10px;
            left: 10px;
            min-width: auto;
        }
    }
</style>
```

</head>
<body>
    <div id="map"></div>
    <div class="loading" id="loading">Loading satellite imagery...</div>

```
<div class="controls">
    <h2>üõ∞Ô∏è Satellite Time Machine</h2>
    
    <div class="control-group">
        <label for="dateInput">Select Date:</label>
        <input type="date" id="dateInput" min="2015-06-23" max="2025-09-30">
    </div>
    
    <button class="btn" onclick="updateSatelliteImage()">Update Imagery</button>
    
    <div class="current-date" id="currentDate">
        Current: Today
    </div>
    
    <div class="info">
        üìç Pan and zoom the map to explore<br>
        üìÖ Sentinel-2 data from June 2015 onwards<br>
        ‚òÅÔ∏è Cloud cover may vary by date
    </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
    // Initialize map
    let map = L.map('map').setView([37.7749, -122.4194], 10); // San Francisco

    // Add base layer (OpenStreetMap)
    let baseLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);

    let satelliteLayer = null;
    let currentDate = new Date().toISOString().split('T')[0];

    // Set default date to today
    document.getElementById('dateInput').value = currentDate;
    document.getElementById('dateInput').max = currentDate;

    // Initialize with Sentinel-2 imagery
    function updateSatelliteImage() {
        const dateInput = document.getElementById('dateInput').value;
        if (!dateInput) {
            alert('Please select a date');
            return;
        }

        // Show loading
        document.getElementById('loading').classList.add('active');

        // Remove old satellite layer
        if (satelliteLayer) {
            map.removeLayer(satelliteLayer);
        }

        // Using Sentinel Hub's free tier with their public instance
        // This uses Sentinel-2 L2A data (atmospherically corrected)
        const sentinelUrl = `https://services.sentinel-hub.com/ogc/wms/YOUR_INSTANCE_ID?` +
            `SERVICE=WMS&REQUEST=GetMap&LAYERS=TRUE-COLOR&` +
            `STYLES=&FORMAT=image/png&TRANSPARENT=true&` +
            `VERSION=1.1.1&WIDTH=256&HEIGHT=256&SRS=EPSG:3857&` +
            `TIME=${dateInput}/${dateInput}&` +
            `BBOX={bbox-epsg-3857}`;

        // For demo purposes, we'll use a working alternative: Planet Labs imagery via their public endpoint
        // Using Mapbox Satellite (requires token, but has free tier)
        // Alternative: EOX's Sentinel-2 cloudless which is free
        
        const eoxUrl = `https://tiles.maps.eox.at/wms?` +
            `service=WMS&request=GetMap&layers=s2cloudless-2021_3857&` +
            `styles=&format=image/png&transparent=false&` +
            `version=1.1.1&width=256&height=256&srs=EPSG:3857&` +
            `bbox={bbox-epsg-3857}`;

        // For time-specific imagery, using USGS Earth Explorer / Landsat
        // Better option: Using Sentinel Hub's public WMS with time parameter
        const timeSpecificUrl = `https://services.sentinel-hub.com/ogc/wms/a9a111b6-8c12-4b16-a9f6-c8fc3b0a0d6f?` +
            `service=WMS&request=GetMap&layers=TRUE-COLOR&` +
            `styles=&format=image/png&transparent=true&` +
            `version=1.3.0&width=256&height=256&crs=EPSG:3857&` +
            `time=${dateInput}/${dateInput}&` +
            `bbox={bbox-epsg-3857}`;

        // Add new satellite layer with time parameter
        satelliteLayer = L.tileLayer(timeSpecificUrl, {
            attribution: '¬© Copernicus Sentinel-2 data',
            maxZoom: 18,
            tileSize: 256
        });

        satelliteLayer.on('tileerror', function(error) {
            console.log('Tile error - using alternative source');
            // Fallback to static satellite imagery if time-specific fails
            if (satelliteLayer) {
                map.removeLayer(satelliteLayer);
            }
            satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                attribution: 'Esri, Maxar, Earthstar Geographics',
                maxZoom: 18
            }).addTo(map);
            
            document.getElementById('loading').classList.remove('active');
        });

        satelliteLayer.on('load', function() {
            document.getElementById('loading').classList.remove('active');
            document.getElementById('currentDate').textContent = `Current: ${dateInput}`;
        });

        satelliteLayer.addTo(map);

        // Hide loading after timeout if tiles don't load
        setTimeout(() => {
            document.getElementById('loading').classList.remove('active');
        }, 3000);
    }

    // Load initial imagery
    updateSatelliteImage();

    // Allow Enter key to update
    document.getElementById('dateInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            updateSatelliteImage();
        }
    });

    // Add some helpful location markers
    const locations = [
        { name: 'San Francisco', coords: [37.7749, -122.4194] },
        { name: 'New York', coords: [40.7128, -74.0060] },
        { name: 'London', coords: [51.5074, -0.1278] },
        { name: 'Tokyo', coords: [35.6762, 139.6503] },
        { name: 'Dubai', coords: [25.2048, 55.2708] }
    ];

    // Add click handler for map to show coordinates
    map.on('click', function(e) {
        console.log(`Clicked at: ${e.latlng.lat}, ${e.latlng.lng}`);
    });
</script>
```

</body>
</html>
