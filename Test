# indices.py
def calculate_indices(blue, green, red, nir):
    """คำนวณดัชนีพืชพรรณหลัก 5 ค่า"""
    ndvi = (nir - red) / (nir + red) if (nir + red) != 0 else 0
    tndvi = ((nir - red) / (nir + red) + 0.5) ** 0.5 if (nir + red) != 0 else 0
    sr = nir / red if red != 0 else 0
    savi = ((nir - red) / (nir + red + 0.5)) * 1.5 if (nir + red + 0.5) != 0 else 0
    msavi2 = (2 * nir + 1 - ((2 * nir + 1) ** 2 - 8 * (nir - red)) ** 0.5) / 2 if (nir - red) >= 0 else 0

    return {
        "NDVI": ndvi,
        "TNDVI": tndvi,
        "SR": sr,
        "SAVI": savi,
        "MSAVI2": msavi2
    }
--

from flask import Flask, render_template, request, jsonify
import ee
import numpy as np
import joblib
from indices import calculate_indices

# Initialize Earth Engine
ee.Initialize(project='map-web-473508')

app = Flask(__name__)

# -----------------------------
# โหลดโมเดล MLP และ SVR พร้อม scaler
# -----------------------------
mlp = joblib.load("models/mlp_model.pkl")
scaler_X = joblib.load("models/scaler_X.save")
scaler_y = joblib.load("models/scaler_y.save")

svr = joblib.load("models/svr_agb_model.pkl")
svr_scaler_X = joblib.load("models/svr_scaler_X.save")
svr_scaler_y = joblib.load("models/svr_scaler_y.save")

# -----------------------------
# Cloud Mask Function (Sentinel-2 SR → Reflectance 0–100)
# -----------------------------
def mask_s2_clouds_reflectance(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0) \
           .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))
    # scale 0–10000 → 0–1 → คูณ 100 → 0–100
    reflectance = image.divide(10000).multiply(100)
    return reflectance.updateMask(mask)

# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')

# -----------------------------
# Endpoint: ดึงค่า Pixel Reflectance 0–100
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])
    start = request.json['start']
    end = request.json['end']

    point = ee.Geometry.Point([lon, lat])

    collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate(start, end)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(mask_s2_clouds_reflectance))

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.first(),
        geometry=point,
        scale=10
    ).getInfo()

    # -----------------------------
    # ดึงค่าการสะท้อนแสง Sentinel
    B2 = bands.get('B2')  # Blue
    B3 = bands.get('B3')  # Green
    B4 = bands.get('B4')  # Red
    B8 = bands.get('B8')  # NIR

    X_input = np.array([[B2, B3, B4, B8]])
    X_scaled = scaler_X.transform(X_input)
    field_reflectance_scaled = mlp.predict(X_scaled)
    field_reflectance = scaler_y.inverse_transform(field_reflectance_scaled)

    blue, green, red, nir = field_reflectance[0]

    # -----------------------------
    # คำนวณ indices จาก red & nir
    indices = calculate_indices(blue, green, red, nir)

    # -----------------------------
    # Predict AGB using SVR
    X_indices = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
    X_indices_scaled = svr_scaler_X.transform(X_indices)
    agb_scaled = svr.predict(X_indices_scaled)
    agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1,1))[0][0]

    # -----------------------------
    return jsonify({
        "field_reflectance": {
            "Blue": float(blue),
            "Green": float(green),
            "Red": float(red),
            "NIR": float(nir)
        },
        "indices": indices,
        "AGB": float(agb)
    })

# -----------------------------
if __name__ == '__main__':
    app.run(debug=True)
--

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Sentinel-2 Viewer</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css"/>
  <style>
    body { margin:0; padding:0; }
    #map { height:100vh; width:75%; float:left; }
    #sidebar { width:25%; height:100vh; float:right; padding:15px; box-sizing:border-box; background:#f7f7f7; overflow-y:auto; font-family:sans-serif; }
    h3 { margin-top:0; }
    label { display:block; margin-top:10px; font-weight:bold; }
    input, button { width:90%; margin-top:5px; padding:5px; font-size:14px; }
    hr { margin:15px 0; }
    #pixelData p { margin:5px 0; }
  </style>
</head>
<body>
  <div id="map"></div>
  <div id="sidebar">
    <h3>Sentinel-2 Control</h3>
    <label>Start Date:</label>
    <input type="date" id="start" value="2020-01-01">
    <label>End Date:</label>
    <input type="date" id="end" value="2020-01-15">
    <button id="getPixel">Get Pixel</button>

    <div id="pixelData" style="margin-top:10px;">
      <p><strong>Selected Point:</strong></p>
      <p id="coord">Lat: -, Lon: -</p>
      <hr>
      <p><strong>Field Reflectance (MLP)</strong></p>
      <p id="blue">Blue: -</p>
      <p id="green">Green: -</p>
      <p id="red">Red: -</p>
      <p id="nir">NIR: -</p>
      <hr>
      <p><strong>Vegetation Indices</strong></p>
      <p id="ndvi">NDVI: -</p>
      <p id="tndvi">TNDVI: -</p>
      <p id="sr">SR: -</p>
      <p id="savi">SAVI: -</p>
      <p id="msavi2">MSAVI2: -</p>
      <hr>
      <p><strong>Estimated AGB:</strong> <span id="agb">-</span></p>
    </div>
  </div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
var map = L.map('map').setView([19.2, 100.1], 10);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

var marker;

function showMarker(lat, lon){
  if(marker) map.removeLayer(marker);
  marker = L.marker([lat, lon]).addTo(map);
  marker.bindPopup(`Lat: ${lat.toFixed(6)}, Lon: ${lon.toFixed(6)}`).openPopup();
}

async function getPixelData(lat, lon){
  let start = document.getElementById('start').value;
  let end = document.getElementById('end').value;
  let resp = await fetch('/get_pixel',{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({lat, lon, start, end})
  });
  let data = await resp.json();

  document.getElementById('coord').innerText = `Lat: ${lat}, Lon: ${lon}`;
  document.getElementById('blue').innerText = `Blue: ${data.field_reflectance.Blue.toFixed(5)}`;
  document.getElementById('green').innerText = `Green: ${data.field_reflectance.Green.toFixed(5)}`;
  document.getElementById('red').innerText = `Red: ${data.field_reflectance.Red.toFixed(5)}`;
  document.getElementById('nir').innerText = `NIR: ${data.field_reflectance.NIR.toFixed(5)}`;

  document.getElementById('ndvi').innerText = `NDVI: ${data.indices.NDVI.toFixed(5)}`;
  document.getElementById('tndvi').innerText = `TNDVI: ${data.indices.TNDVI.toFixed(5)}`;
  document.getElementById('sr').innerText = `SR: ${data.indices.SR.toFixed(5)}`;
  document.getElementById('savi').innerText = `SAVI: ${data.indices.SAVI.toFixed(5)}`;
  document.getElementById('msavi2').innerText = `MSAVI2: ${data.indices.MSAVI2.toFixed(5)}`;

  document.getElementById('agb').innerText = data.AGB.toFixed(5);
}

document.getElementById('getPixel').onclick = function(){
  let lat = parseFloat(prompt("Enter Latitude:"));
  let lon = parseFloat(prompt("Enter Longitude:"));
  if(isNaN(lat) || isNaN(lon)){
    alert("Invalid coordinates!");
    return;
  }
  showMarker(lat, lon);
  getPixelData(lat, lon);
}

map.on('click', function(e){
  let lat = e.latlng.lat;
  let lon = e.latlng.lng;
  showMarker(lat, lon);
  getPixelData(lat, lon);
});
</script>
</body>
</html>
