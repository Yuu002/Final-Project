@app.route(’/get_pixel’, methods=[‘POST’])
def get_pixel():
lat = float(request.json[‘lat’])
lon = float(request.json[‘lon’])
start = request.json[‘start’]
end = request.json[‘end’]

```
point = ee.Geometry.Point([lon, lat])

collection = (
    ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
    .filterDate(start, end)
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .map(mask_s2_clouds_reflectance)
)

image = collection.mean()

bands = image.reduceRegion(
    reducer=ee.Reducer.first(),
    geometry=point,
    scale=10
)

pixel_data = bands.getInfo()

# Step 1: Get Blue, Green, Red, NIR
try:
    blue = float(pixel_data.get("B2", 0))
    green = float(pixel_data.get("B3", 0))
    red = float(pixel_data.get("B4", 0))
    nir = float(pixel_data.get("B8", 0))
except:
    return jsonify({"error": "invalid pixel values"})

# Step 2: MLP → Field Reflectance
X = np.array([[blue, green, red, nir]])
X_scaled = scaler_X.transform(X)
y_pred_scaled = mlp_model.predict(X_scaled)
field_reflectance = scaler_y.inverse_transform(y_pred_scaled)

# Step 2.5: REF → Corrected Field Reflectance
ref_X_scaled = ref_scaler_X.transform(field_reflectance)
ref_y_pred_scaled = ref_model.predict(ref_X_scaled)
ref_field_reflectance = ref_scaler_y.inverse_transform(ref_y_pred_scaled)

ref_blue, ref_green, ref_red, ref_nir = ref_field_reflectance.ravel()

# Step 3: Calculate indices
indices = calculate_indices(ref_blue, ref_green, ref_red, ref_nir)

# Step 4: SVR → Predict AGB
idx_vals = np.array([[indices["NDVI"], indices["TNDVI"], indices["SR"], indices["SAVI"], indices["MSAVI2"]]])
idx_scaled = svr_scaler_X.transform(idx_vals)
agb_scaled = svr_model.predict(idx_scaled)
agb = svr_scaler_y.inverse_transform(agb_scaled.reshape(-1, 1)).ravel()[0]

# IMPORTANT: Convert all numpy types to native Python float to preserve negative signs
pixel_data['B2'] = float(blue)
pixel_data['B3'] = float(green)
pixel_data['B4'] = float(red)
pixel_data['B8'] = float(nir)

pixel_data.update({
    "field_reflectance": {
        "Blue": float(ref_blue),
        "Green": float(ref_green),
        "Red": float(ref_red),
        "NIR": float(ref_nir)
    },
    "indices": {
        "NDVI": float(indices["NDVI"]),
        "TNDVI": float(indices["TNDVI"]),
        "SR": float(indices["SR"]),
        "SAVI": float(indices["SAVI"]),
        "MSAVI2": float(indices["MSAVI2"])
    },
    "AGB": float(agb)
})

return jsonify(pixel_data)
```
