from flask import Flask, render_template, request, jsonify
import ee

# Initialize Earth Engine
ee.Initialize(project='map-web-473508')

app = Flask(__name__)

# -----------------------------
# Cloud Mask + Sentinel Reflectance ปรับด้วย Gain ของ THEOS-1
# -----------------------------
def mask_s2_clouds_theos(image):
    qa = image.select('QA60')
    cloud_bit_mask = 1 << 10
    cirrus_bit_mask = 1 << 11
    mask = qa.bitwiseAnd(cloud_bit_mask).eq(0) \
           .And(qa.bitwiseAnd(cirrus_bit_mask).eq(0))

    # Sentinel SR scale = 0–10000 → reflectance 0–1
    reflectance = image.divide(10000)

    # -----------------------------
    # Apply THEOS-1 Gain per band
    # -----------------------------
    reflectance = reflectance.select('B2').multiply(1.46853).rename('B2') \  # Blue
                  .addBands(reflectance.select('B3').multiply(1.50071).rename('B3')) \  # Green
                  .addBands(reflectance.select('B4').multiply(1.71019).rename('B4')) \  # Red
                  .addBands(reflectance.select('B8').multiply(1.67119).rename('B8'))    # NIR

    # THEOS-style: คูณ 100 → 0–100
    theos_reflectance = reflectance.multiply(100)

    return theos_reflectance.updateMask(mask)

# -----------------------------
@app.route('/')
def index():
    return render_template('index.html')

# -----------------------------
# Endpoint ดึงแผนที่ Sentinel-2 (THEOS-style reflectance)
# -----------------------------
@app.route('/get_map', methods=['POST'])
def get_map():
    start = request.json['start']
    end = request.json['end']

    # Sentinel Reflectance (THEOS-style 0–100)
    collection_ref = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                      .filterDate(start, end)
                      .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                      .map(mask_s2_clouds_theos))
    image_ref = collection_ref.mean()

    vis_theos = {
        'bands': ['B4', 'B3', 'B2'],  # Red, Green, Blue
        'min': 0,
        'max': 100,
        'gamma': 1.0
    }
    map_id_theos = ee.Image(image_ref).getMapId(vis_theos)

    return jsonify({
        'theos_url': map_id_theos['tile_fetcher'].url_format
    })

# -----------------------------
# Endpoint ดึงค่า pixel (THEOS-style reflectance 0–100)
# -----------------------------
@app.route('/get_pixel', methods=['POST'])
def get_pixel():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])
    start = request.json['start']
    end = request.json['end']

    point = ee.Geometry.Point([lon, lat])

    collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                  .filterDate(start, end)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                  .map(mask_s2_clouds_theos))

    image = collection.mean()

    bands = image.reduceRegion(
        reducer=ee.Reducer.first(),
        geometry=point,
        scale=10
    )

    return jsonify(bands.getInfo())

# -----------------------------
if __name__ == '__main__':
    app.run(debug=True)
